[["index.html", "BIOESTATÍSTICA USANDO O R Capítulo 1 Dados 1.1 O que são dado? 1.2 População e Amostra 1.3 Estimativas e Parâmetros 1.4 Escalas de medição 1.5 Tipos de Variáveis 1.6 Variáveis dependentes e independentes 1.7 Leitura Adicional", " BIOESTATÍSTICA USANDO O R Petrônio Fagundes de Oliveira Filho 2022-08-11 Capítulo 1 Dados 1.1 O que são dado? Em qualquer lugar que depositarmos o nosso olhar, encontramos uma infinidade de dados e seus resumos estatísticos e interpretações. Por exemplo: Exemplo 1.1: PIB dos EUA cai há dois trimestres “Dados divulgados ontem pelo departamento de Comércio mostram que o PIB caiu 0,9%, na comparação anualizada, e 0,2% em relação ao 1º trimestre” 1. A esta notícia segue-se a interpretação da Casa Branca de que a economia dos EUA não se encontra em uma recessão. Isso pode ser verdade? Aparentemente, é o desejo do presidente Biden. Não temos outras informações para melhor analisar os dados. Exemplo 1.2: Prevalência, mortalidade e fatores de risco associados aos nascimentos de prematuros Um estudo realizado em Pelotas, RS buscou verificar a prevalência, mortalidade e fatores de risco associados aos nascimentos de prematuros de muito baixo peso ao nascer (MBPN) ao longo de 33 anos2. Este estudo incluiu uma série de quatro estudos transversais utilizando dados das entrevistas perinatais das coortes de nascimento da cidade de Pelotas coletados em 1982, 1993, 2004 e 2015, envolvendo19.625 recém-nascidos. Em 1982, 1993, 2004 e 2015 ocorreram, respectivamente, 5.909, 5.232, 4.226 e 4.258 nascimentos. A prevalência de prematuros de muito baixo peso ao nascer naqueles anos foi, respectivamente, de 1,1% (n = 64), 0,9% (n = 46), 1,4% (n = 61) e 1,3% (n = 54). A tendência de aumento durante o período não alcançou significância estatística (P = 0,11). Entre os fatores de risco, a renda familiar nos três quintis mais pobres esteve associada a prevalências cerca de duas vezes mais altas do que no quintil mais rico (p = 0,003). A mortalidade por 1.000 nascidos vivos para os neonatos com peso &lt; 1500 g caiu de 688 para 259 por mil ao longo dos anos (p &lt; 0,001), mas ainda representa 61% dos óbitos neonatais em 2015. Aqui, temos uma pesquisa científica com dados relevantes em Saúde Pública. Como vemos, as pesquisas manuseiam dados. Cada conjunto de dados está relacionado às variáveis que estão sendo estudadas em uma pesquisa. Variável é toda característica ou condição de interesse que pode de ser mensurada ou observada em cada elemento de uma amostra ou população. Como o próprio nome diz, seus valores são passíveis variar de um indivíduo a outro ou no mesmo indivíduo. Em contraste com a variável, o valor de uma constante é fixo. As variáveis podem ter valores numéricos ou não numéricos. O resultado da mensuração ou observação de uma variável é denominado dado . 1.2 População e Amostra Na pesquisa em saúde, a não ser quando se realiza um censo, coleta-se dados de um subconjunto de indivíduos denominado de amostra, pertencente a um grupo maior, conhecido como população. A população de interesse é, geralmente, chamada de população-alvo. A amostra para ser representativa da população deve ter as mesmas características desta. A partir dos dados encontrados na amostra, presume-se o resultado é condizente com a população. Este processo é denominado de inferência estatística. O interesse na amostra não está propriamente nela, mas na informação que ela fornece ao investigador sobre a população de onde ela provém. A amostra fornece estimativas (estatísticas) da população. Em decorrência do acaso, diferentes amostras de uma mesma população fornecem resultados diferentes. Este fato deve ser levado em consideração ao usar uma amostra para fazer inferência sobre uma população. Este fenômeno é denominado de variação amostral ou erro amostral e é a essência da estatística. O grau de certeza na inferência estatística depende da representatividade da amostra. O processo de obtenção da amostra é chamado de amostragem. Mesmo que este processo seja adequado, a amostra nunca será uma cópia perfeita da população de onde ela foi extraída. Desta forma, em qualquer conclusão baseada em dados de uma amostra, sempre haverá o que é conhecido como erro amostral. Este erro deve ser tratado estatisticamente tendo em mente a teoria da amostragem, baseada em probabilidades. 1.3 Estimativas e Parâmetros Estimativa é uma característica que resume os dados de uma amostra (estatística amostral) e o parâmetro é uma característica estabelecida para toda a população. Os valores dos parâmetros são normalmente desconhecidos, porque é inviável medir uma população inteira. A estimativa é um valor aproximado do parâmetro. As estimativas são representadas por letras romanas e os parâmetros por letras gregas (Tabela 1.1). Na maioria dos estudos, são utilizadas amostras que fornecem estimativas que, para serem representativas da população, devem ser probabilísticas. Ou seja, a amostra deve ser recrutada de forma aleatória, permitindo que cada um dos membros da população tenha a mesma probabilidade de ser incluído na amostra. Além disso, uma amostra deve ter um tamanho adequado para permitir inferências válidas. Tabela 1.1 Estimativas (estatísticas amostrais) e parâmetros. Medidas Estimativas Parâmetros Média \\(\\overline{x}\\) \\(\\mu\\) Desvio Padrão s \\(\\sigma\\) Variância \\(s^2\\) \\(\\sigma^2\\) Proporção \\(\\hat{p}\\) \\(p\\) Número de elementos \\(n\\) \\(N\\) 1.4 Escalas de medição Em um estudo científico, há necessidade de registrar os dados para que eles representem acuradamente as variáveis observadas. Este registro de valores necessita de escalas de medição. Mensuração ou medição é o processo de atribuir números ou rótulos a objetos, pessoas, estados ou eventos de acordo com regras específicas para representar quantidades ou qualidades dos dados. Para a mensuração das variáveis são usadas as escalas nominal, ordinal, intervalar e de razão. 1.4.1 Escala Nominal As escalas nominais são meramente classificativas, permitindo descrever as variáveis ou designar os sujeitos, sem recurso à quantificação. É o nível mais elementar de representação. São usados nomes, números ou outros símbolos para designar a variável. Os números, quando usados, representam códigos e como tal não permitem operações matemáticas. As variáveis nominais não podem ser ordenadas. Podem apenas ser comparadas utilizando as relações de igualdade ou de diferença, através de contagens. Os números atribuídos às variáveis servem como identificação, ou para associá-la uma dada categoria. As categorias de uma escala nominal são exaustivas e mutuamente exclusivas. Quando existem duas categorias, a variável é dita dicotômica e com três ou mais categorias, politômicas. Os nomes e símbolos que designam as categorias podem ser intercambiáveis sem alterar a informação essencial. Exemplos: Tipos sanguíneos: A, B, AB, O; variáveis dicotômicas: morto/vivo, homem/mulher, sim/não; cor dos olhos, etc. 1.4.2 Escala Ordinal As variáveis são medidas em uma escala ordinal quando ocorre uma ordem, crescente ou decrescente, inerente entre as categorias, estabelecida sob determinado critério. A diferença entre as categorias não é necessariamente igual e nem sempre mensuráveis. Geralmente, designam-se os valores de uma escala ordinal em termos de numerais ou postos (ranks), sendo estes apenas modos diferentes de expressar o mesmo tipo de dados. Também não faz sentido realizar operações matemática com variáveis ordinais. Pode-se continuar a usar contagem. Exemplos: classe social (baixa, média, alta); estado geral do paciente: bom, regular, mau; estágios do câncer: 0, 1, 2, 3 e 4; escore de Apgar: 0, 1, 2… 10. 1.4.3 Escala Intervalar Uma escala intervalar contém todas as características das escalas ordinais com a diferença de que se conhece as distâncias entre quaisquer números. Em outras palavras, existe um espectro ordenado com intervalos quantificáveis. Este tipo de escala permite que se verifique a ordem e a diferença entre as variáveis, porém não tem um zero verdadeiro, o zero é arbitrário. O exemplo clássico é a mensuração da temperatura, usando as escalas de: Celsius ou Fahrenheit. Aqui é legítimo ordenar, fazer soma ou médias. No entanto, 0ºC não significa ausência de temperatura, portanto a operação divisão não é possível. Uma temperatura de 40ºC não é o dobro de 20ºC. Se 40ºC e 20ºC forem transformados para a escala Fahrenheit, passarão, respectivamente, para 104ºF e 68ºF e, sem dúvida, 104 não é o dobro de 68! 1.4.4 Escala de Razão Há um espectro ordenado com intervalos quantificáveis como na escala intervalar. Entretanto, as medidas iniciam a partir de um zero verdadeiro e a escala tem intervalos iguais, permitindo as comparações de magnitude entre os valores. Refletem a quantidade real de uma variável, permitindo qualquer operação matemática. Os dados tanto na escala intervalar como na de razão, podem ser contínuos ou discretos. Dados contínuos necessitam de instrumentos para a sua mensuração e assumem qualquer valor em um certo intervalo. Por exemplo, o tempo para terminar qualquer tarefa pode assumir qualquer valor, 10 min, 20 min, 35 min, etc., de acordo com o tipo de tarefa. Outros exemplos: peso, dosagem de colesterol, glicemia. Dados discretos possuem valores iguais a números inteiros, não existindo valores intermediários. A mensuração é feita através da contagem. Por exemplo: número de filhos, número de fraturas, número de pessoas. 1.5 Tipos de Variáveis A primeira etapa na descrição e análise dos dados é classificar as variáveis, pois a apresentação dos dados e os métodos estatísticos variam de acordo com os seus tipos. As variáveis, primariamente, podem ser divididas em dois tipos: numéricas ou quantitativas e categóricas ou qualitativas. 1.5.1 Variáveis Numéricas As variáveis numéricas são classificadas em dois tipos de acordo com a escala de mensuração: continuas e discretas. As variáveis contínuas são aquelas cujos dados foram mensurados em uma escala intervalar ou de razão, podendo assumir como visto, qualquer valor dentro de um intervalo de números reais, dependendo da precisão do instrumento de medição. O tratamento estatístico tanto para variável intervalar como de a razão é o mesmo. A diferença entre elas está na presença do zero absoluto. As variáveis numéricas contínuas têm unidade de medida. Por exemplo, um menino de 4 anos tem 104 cm. Uma variável numérica é considerada discreta quando é apenas possível quantificar os resultados possíveis através do processo de contagem. Também têm unidades de medida – “número de elementos”. 1.5.2 Variáveis Categóricas As variáveis categóricas ou qualitativas são de dois tipos: nominal e ordinal, de acordo com a escala de mensuração. Um tipo particularmente comum é uma variável binária (também conhecida como variável dicotômica), que tem apenas dois valores possíveis. Por exemplo, o sexo é masculino ou feminino. Este tipo de variável é bastante utilizado na área da saúde, em Epidemiologia. As variáveis nominais não têm quaisquer unidades de medida e a nominação das categorias é completamente arbitrária e pertencer a uma categoria não significa ter maior importância do que pertencer à outra. Uma variável é dita ordinal quando ocorre uma ordem inerente ou hierarquia entre as categorias. Do mesmo modo que as variáveis nominais, as variáveis ordinais não têm unidades de medida. Entretanto, a ordenação das categorias não é arbitrária. Assim, é possível ordená-las de modo lógico. Um exemplo comum de uma variável categórica ordinal é a classe social, que tem um ordenamento natural da maioria dos mais desfavorecidos para os mais ricos. As escalas, como a escore de Apgar e a escala de coma de Glasgow, também são variáveis ordinais. Mesmo que pareçam numéricas, elas apenas mostram uma ordem no estado dos pacientes. O escore de Apgar é uma escala, desenvolvida para a avaliação clínica do recém-nascido imediatamente após o nascimento. Originalmente, a escala foi usada para avaliar a adaptação imediata do recém-nascido à vida extrauterina. A pontuação pode variar de zero a 10. Uma pontuação igual ou maior do que oito, indica um recém-nascido normal. Uma pontuação de sete ou menos pode significar depressão do sistema nervoso e abaixo de quatro, depressão grave. As variáveis ordinais, da mesma forma que as nominais, não são números reais e não convém aplicar as regras da aritmética básica para estes tipos de dados. Este fato gera uma limitação na análise dos dados. 1.6 Variáveis dependentes e independentes De um modo geral as pesquisas são realizadas para testar as hipóteses dos pesquisadores e, para isso, eles medem variáveis com a finalidade de compará-las. A maioria das hipóteses podem ser expressas por duas variáveis: uma variável explicativa ou preditora e uma variável desfecho. A variável preditora ou explanatória é a que se acredita ser a causa e também é conhecida como variável independente, porque o seu valor não depende de outras variáveis. Em Epidemiologia, é com frequência referida como exposição ou fator de risco. A variável desfecho é aquela que é o efeito, consequência ou resultado da ação de outra variável, por isso, também chamada de variável dependente. Em estudo que tenta verificar se o tabagismo, durante a gestação, pode interferir no peso do recém-nascido, tem o fumo (variável categórica) como variável preditora (exposição ou fator de risco) e o peso do recém-nascido (variável numérica contínua) como variável desfecho. 1.7 Leitura Adicional Altman DG. Practical Statistics for Medical Research. London: Chapman &amp; Hall/CRC; 1991. Types of data; p.10-8. Kirkwood BR, Sterne JAC. Essential Medical Statistics. Fourth Edition. Oxford: Blackwell Science Ltd; 2003. Defining the data; p.9-14. Oliveira Filho PF. Epidemiologia e Bioestatística: fundamentos para a leitura crítica. 2ª ed. Rio de Janeiro: Editora Rubio Ltda; 2015. Natureza dos dados;p.3-6. Valor Econômico, Sexta-feira, 29 de julho de 2022, Ano 23, Número 5552↩︎ Victora JD, Silveira MF, Tonial CT, Victora CG, Barros FC, Horta BL, et al. Prevalence, mortality and risk factors associated with very low birth weight preterm infants: an analysis of 33 years. J Pediatr (Rio J). 2020;96:327-32↩︎ "],["ambiente-do-r.html", "Capítulo 2 Ambiente do R 2.1 Instalação do software R no Windows 2.2 Instalação do R Studio no Windows", " Capítulo 2 Ambiente do R 2.1 Instalação do software R no Windows O R é o programa “cérebro” necessário para as análises de dados que serão realizadas. Este tutorial visa auxiliar na instalação. Assista o vídeo e/ou use o tutorial como guia. Baixe a última versão do instalador do R diretamente do repositório oficial, usando o link. Após clicar em Download R 4.2.1 for Windows (última versão do R, nesta data), você deve salvar o arquivo R-4.2.1-win.exe em qualquer diretório (eu uso: \"C:\\Users\\T.S\\Downloads\\R-4.2.1-win.exe\". Ao fazer isso, aparece na tela de seu computador,no canto esquerdo, em baixo, o arquivo salvo. Execute este arquivo com um clique sobre ele. Aparecerá na tela uma imagem perguntando “Deseja permitir que este aplicativo faça alterações no seu dispositivo?”. Clique em Sim . A seguir o Instalador pedirá para escolher o Idioma. Selecione Português Brasileiro. Em sequência aparecerão informações sobre o diretório no qual o R será instalado em seu computador. Recomenda-se aceitar a configuração padrão sugerida pelo instalador do software. A próxima janela pedirá para personalizar os componentes que serão instalados. Recomenda-se usar as configurações sugeridas pelo instalador que irá reconhecer automaticamente. A partir daqui, siga as recomendações padrão propostas pelo instalador até completar a instalação, clicando em Concluir (Figura 1). \\(~\\) Figura 1. Término da Instalação \\(~\\) 2.2 Instalação do R Studio no Windows Siga os seguintes passos para a instalação do R Studio que é o “gerente” e “porta voz” do R. O tutorial do vídeo também mostra os passos a serem realizados. Clique sobre este link e realize o download para o seu sistema operacional do RStudio-2022.07.1-554, da mesma maneira que para o R. Abra o arquivo executável baixado, no canto esquerdo embaixo. Será repetida a mesma pergunta feita para o R. Clique Sim . Siga os passos apresentados pelo instalador, lendo com atenção. Aguarde a conclusão da instalação e clique em Terminar . Para verifcar se a instalação foi concluída com sucesso, abra o R Studio através do menu Iniciar do Windows ou clicando no ícone do R Studio. Segue a imagem da tela que será aberta (Figura 2). \\(~\\) Figura 2. Tela Inicial do R Studio \\(~\\) O painel da esquerda é o Console é a parte do R Studio que dialoga com o R. Pode-se dizer que é a mais importante, pois é nele que os códigos são executados. Quando o programa é aberto, aparece a versão corrente do R e algumas informações sobre o mesmo. Se isto acontecer, é sinal de que está tudo certo! No painel superior, à direita, é o ambiente de trabalho e histórico dos comandos. No painel inferior, à direita, encontramos os gráficos, os arquivos, a ajuda e os pacotes instalados, além do visualizador. Em outro post e à medida que as aulas acontecerem, mostraremos as funcionalidades do R Studio. O objetivo agora é apenas instalar e apresentar o R Studio. É importante salientar que o R Studio funciona apenas com o R instalado, não havendo necessidade de carregar o R para que isso aconteça. Basta carregar o R Studio e voilá! Recomenda-se baixar para um diretório específico, por exemplo, Bioestatística_R. Abra o arquivo a partir dele para que os comandos possam ser executados. Usar sempre este diretório para o seu trabalho com Bioestatística "],["iniciando-o-rstudio.html", "Capítulo 3 Iniciando o RStudio 3.1 Interface do RStudio 3.2 Iniciando um novo projeto 3.3 Primeiro Script", " Capítulo 3 Iniciando o RStudio 3.1 Interface do RStudio Ao abrir o RStudio, você verá a seguinte tela. As cores e fontes podem variar dependendo do seu sistema operacional, mas o layout será o mesmo. \\(~\\) \\(~\\) Os quadros coloridos (vermelho, azul e amarelo) foram acrescentados para melhor identificação dos painéis principais. No Console os comandos serão executados e é onde aparecerá a saída com os resultados. No Ambiente aparecerá uma lista organizada do que foi criados, bem como as variáveis. Na janela em amarelo estão os gráficos criados (aba Plots), os arquivos do computador (aba Files), os pacotes baixados (aba Packages), a ajuda (aba Help) e o visualizador (aba Viewer). Um quarto painel aparece quando se cria um novo R Script. Este é criado através do menu File &gt; New File &gt; R Script ou clicando no botão verde com o sinal (+), na barra de ferramentas de acesso rápido, na parte superior à esquerda. Ao criar um novo R Script, o painel do script, espécie de bloco de notas, será aberto. \\(~\\) \\(~\\) Apesar de ser possível escrever seus códicos e executá-los diretamente no Console, preferencialmente, digite-os neste novo painel e envie para serem executados no Console, utilizando o botão Run ou o atalho Ctrl + Enter . Quando o R Script é aberto, ele aparece sem título (Untitled1) e ao salvá-lo devemos dar um título. A partir daí, ele estrá disponível para ser novamente utilizado. Esta é uma das diferenças importantes com o Console. Todos os comandos usados no Console não podem ser salvos, porisso o Console é utilizado para realizar comandos temporários e rápidos que não necessitam ser salvos. Os nossos scripts devem ser salvos em um diretório relacionados a eles. O ideal é criarmos um novo projeto para cada análise. 3.2 Iniciando um novo projeto Quando começamos um trabalho com um novo banco de dados, um Novo Projeto deve ser criado. Para isso, clicar File &gt; New Project ou clicar no menu que está na parte superior, à direita, Project (none) &gt; New Project…. Abrirá a janela abaixo. Clique em New Directory para criar um novo diretório. Por exemplo, para as aulas de Bioestatística usando o R, pode-se criar um diretório com este nome ou qualquer outro nome. \\(~\\) \\(~\\) Quaisquer documentos Excel ou arquivos de texto associados podem ser salvos nesta nova pasta e facilmente acessados de dentro de R, indo ao menu Project (none) &gt; Open Project…. Você pode então realizar análises de dados ou produzir visualizações com seus dados importados. 3.3 Primeiro Script O R Script, como foi dito antes, é o local preferido para entrar com os comandos. Inserir 3 ou mais caracteres de um comando em um script abrirá o menu de comando sugerido. Este menu sugere comandos ou nomes de variáveis que você pretendeu digitar, junto com uma descrição e uso sugerido. Vamos imaginar que queremos saber o logaritimo na base 10 de um número. Quando digitamos dentro do R Script a palavra log , abre-se o menu de autocompletar, como mostrado na figura. \\(~\\) \\(~\\) Completando o R Script e executando, veremos o resultado no no Console: log10(100) ## [1] 2 Selecione, Copie e cole em um R Script os comandos abaixo. Execute-os clicando no botão Run ou usando o atalho Ctrl + Enter .Veja os resultados no seu Console: x=1:500 y=cumsum (sample (0:1,500, rep=TRUE)) plot (x,y/1:500, ylab=&quot;Probabilidade&quot;, xlab = &quot;Lançamentos da moeda&quot;, ylim=c (0.3,0.8), xlim=c (0,500), pch=16, col=&quot;steelblue&quot;) abline(h = 0.5, col = &quot;red&quot;, lty = 2) Complicado? Sim, a primeira vista parece complicado, complexo, mas à medida que os conhecimentos forem se acumulando estes comandos ficarão simples. Na aba Plot, no painel inferior, à direita, aparecerá o resultado dos comandos acima que deve ser: Observação: É importante o acompanhamento do tutorial com o RStudio aberto. Crie um R Script. Copie os comandos do tutorial (retangulos cinza claro) e execute os mesmos para ver o resultado no Console ou na aba Plots. Compare com o tutorial. \\(~\\) \\(~\\) "],["matemática-básica-no-rstudio.html", "Capítulo 4 Matemática Básica no RStudio 4.1 Operadores 4.2 Logarítimo 4.3 Raiz quadrada 4.4 Resultado absoluto 4.5 Potenciação 4.6 Exercícios", " Capítulo 4 Matemática Básica no RStudio 4.1 Operadores Para termos uma visão geral dos operadores usados para realizar operações com variáveis e valores, clique aqui Por exemplo, o operador \\(+\\) (adição) é usado para somar dois valores: 10 + 5 ## [1] 15 4.1.1 Operadores aritméticos No R, você pode usar operadores aritméticos para realizar operações matemáticas comuns Operador Nome Exemplo + adição \\(x + y\\) - subtração \\(x - y\\) * multiplicação \\(x*y\\) / divisão \\(x/y\\) ^ expoente \\(x^y\\) %% módulo (resto da divisão) x%%y %/% divisão inteira x%/%y 10 + 5 ## [1] 15 10 - 5 ## [1] 5 10 * 5 ## [1] 50 10 / 5 ## [1] 2 10 ^ 5 ## [1] 1e+05 10 %% 3 ## [1] 1 10 %/% 3 ## [1] 3 O resultado da 5ª operação é exibido como notação científica, onde \\(e+05\\) significa \\(10^5\\). 4.1.2 Operadores de atribuição Operadores de atribuição são usados para atribuir valores a variáveis: minha_var &lt;- 5 5 -&gt; minha_var minha_var # imprime minha_var ## [1] 5 É possível, como vimos, mudar a direção do operador de atribuição. x &lt;- 5 é igual a 5 -&gt; x 4.1.3 Operadores de comparação São usados para comparar dois valores. Operador Nome Exemplo == igual \\(x == y\\) != não é igual \\(x != y\\) &gt; maior que \\(x&gt;y\\) &lt; menor que \\(x&lt;y\\) &gt;= maior ou igual que \\(x&gt;=y\\) &lt;= menor ou igual que \\(x&lt;=y\\) 3 == 3 ## [1] TRUE 3 == 4 ## [1] FALSE 3 != 4 ## [1] TRUE 3 &lt; 4 ## [1] TRUE 5 &gt;= 3 ## [1] TRUE 4.1.4 Operadores lógicos Operadores lógicos são usados para combinar declarações condicionais: Operador Descrição &amp; Operador lógico E (AND). Retorna TRUE se ambos os elementos forem TRUE &amp;&amp; Operador lógico E (AND) - Retorna TRUE se ambas as instruções forem TRUE \\(|\\) Operador lógico OU (OR). Retorna TRUE se uma das instruções for TRUE \\(||\\) Operador lógico OU (OR). Retorna TRUE se uma das instruções for TRUE ! Operador lógico NÃO (NOT). Retorna FALSE se a instrução for TRUE 6 == 6 &amp; 7 == 8 ## [1] FALSE 6 == 6 | 7 == 8 ## [1] TRUE 4.2 Logarítimo log (10) # log natural ## [1] 2.302585 log10 (10) # log base 10 ## [1] 1 4.3 Raiz quadrada sqrt (81) ## [1] 9 4.4 Resultado absoluto abs (3 - 6) ## [1] 3 4.5 Potenciação 2^2 ## [1] 4 10^5 ## [1] 1e+05 4.6 Exercícios Coloque em linguagem do R: \\((1 + 3 + 2 + 12 + 8)/5\\) (1 + 3 + 2 + 12 + 8)/5 ## [1] 5.2 Coloque em linguagem do R: \\(1 + 3 + 2 + 12 + 8/5\\) 1 + 3 + 2 + 12 + 8/5 ## [1] 19.6 Coloque em linguagem do R: \\(((2 - 1)^2 + (1 - 3)^2)^{1/2}\\) ((2 - 1)^2 + (1 - 3)^2 )^(1/2) ## [1] 2.236068 Coloque em linguagem do R: \\(\\sqrt{(4 + 3)(2 + 1)}\\) sqrt((4 + 3)*(2 + 1)) ## [1] 4.582576 Coloque em linguagem do R: \\(1 + 2 \\times 3^4\\) 1 + 2 * 3^4 ## [1] 163 Coloque em linguagem do R: \\(\\pi \\times 2\\) pi ## [1] 3.141593 pi*2 ## [1] 6.283185 Coloque em linguagem do R: \\(4^3 + 3^{2 + 1}\\) 4^3 + 3^(3+1) ## [1] 145 Coloque em linguagem do R: \\(e^2\\) e^2 Como o número de Euler(e) é uma constante matemática como o \\(\\pi\\). Entretanto, ao contrário do \\(\\pi\\), ela não está incluída no R e a execução do comando retorna uma mensagem de erro. Deve-se criar o objeto e e dar um valor igual a exponencial de 1 que é o número de Euler: e = exp(1) e ## [1] 2.718282 e^2 ## [1] 7.389056 Coloque em linguagem do R: x = 34. y = 47, \\(\\sqrt{x \\times y}\\) x &lt;- 34 y &lt;- 47 sqrt(x * y) ## [1] 39.97499 Coloque em linguagem do R: \\(\\pi \\times 10 -log_{10}2\\) pi*10 - log(2,10) # Ou ## [1] 31.1149 pi * 10 - log10(2) # Ou ## [1] 31.1149 pi * 10 - log (2, base = 10) ## [1] 31.1149 "],["pacotes.html", "Capítulo 5 Pacotes 5.1 Repositórios de pacotes 5.2 Instalação de um pacote 5.3 Carregar um pacote", " Capítulo 5 Pacotes Para que o R cumpra a sua função de dialogar com o usuário para realizar análises estatística e construir gráficos, ele necessita ter instalado pacotes. Quando se instala o R básico, ele vem com vários pacotes que permitem uma grande quantidade de análises. Entretanto, à medida que vamos utilizando o R, torna-se necessário instalar novos pacotes criados pela comunidade do R. Esses novos pacotes contêm novas funções e novos comandos que aumentarão a funcionalidade do R. Um pacote é uma coleção de funções, dados e documentação que expande os recursos do R base. O uso dos pacotes é a chave para o uso bem-sucedido do R. Eles são instalados à medida que o trabalho com o R exigir. 5.1 Repositórios de pacotes Quando identificamos a necessisdade de um novo pacote, precisamos saber onde ele se encontra. O principal repositório de pacotes é o CRAN (Comprehensible R Archive Network). Para acessar este repositório, use o link e escolha um espelho (0-Cloud ou o mais próximo geograficamente de você). Estando na página do CRAN, no menu, à esquerda, clique em Packages . Isto o colocará na página dos Contributed Packages, onde a maioria dos pacotes podem ser encontrados em Table of available packages, sorted by name . També é possível clicar em CRAN Task Views , onde encontramos os pacotes separados por tópicos. 5.2 Instalação de um pacote Uma maneira simples de instalar um pacote é usar a função install.packges (), colocando entre os parênteses o nome do pacote entre aspas. Por exemplo, para instalar um pacote bastante utilizado na construção de gráficos: install.packages(&quot;ggplot2&quot;) No painel inferior direito, na aba Packages é possível ver todos os pacotes instalados. Nesta aba, na parte superior, à esquerda, existe um botão Install. Clicando nele, abre-se a caixa de diálogo Install Packages. Escreva o nome do pacote que deseja instalar no campo Packages e clique em instalar. Isso instalará o pacote que você pesquisou ou fornecerá uma lista de pacotes correspondentes com base no que foi digitado. Por padrão, o R Studio busca no repositório CRAN e salva no diretório onde está instalado o R. Certifique-se que a caixa Install dependencies esteja marcada (Figura 1). \\(~\\) Figura 1. Install Packages \\(~\\) Uma outra forma de abrir a caixa de diálogo da Figura 1 é ir em Tools na barra de menus e clicar em Install Packages…. Assim que ele estiver instalado, o pacote aparecerá na aba Packages, o nome do pacote. Os pacotes somente precisam ser instalados apenas uma vez. Entretanto, quando o R for atualizado para uma nova versão, os pacotes deverão ser novamente instalados. Um pacote do R base não precisa ser instalado. 5.3 Carregar um pacote Para utilizar um pacote instalado, há necessidade de carregá-lo. Para isso, existem duas maneiras mais frequentes, uma usando a função library () e outra usando a função require (). Para carregar o pacote ggplot2, procede-se da seguinte maneira: library (ggplot2) Ou require (ggplot2) Existe pouca diferença entre elas. Se você usar a library (ggplot2) e o ggplot2 não tiver sido instalado, seu programa irá parar com a mensagem Error in library(ggplot2) : there is no package called ‘ggplot2’ . Se você usar require (ggplot2), receberá um aviso ( Warning message: ), mas não uma mensagem de erro. Na prática, toinnn… Uma maneira de evitar as mensagens, se isso preocupa você, é usar o seguinte comando: if (!require(&quot;ggplot2&quot;)) install.packages(&quot;ggplot2&quot;) library(ggplot2) Estes comandos irão instalar o ggpplot2 se ele não estiver instalado e, depois, irão carregá-lo. Se ele já estiver instalado, será simplesmente carregado. NOTA: Esta é uma outra característica importante do R: existe múltiplas maneiras de se fazer a mesma coisa! A escolha é nossa! Outra maneira de carregar o pacote é, na aba Pacakges, User Library e clicar no pacote desejado. Observe no Console que aparece a execução de library (ggplot2), carregando o pacote ggplot2. Para conhecer todas as funcionalidades e documentação de um pacote, podemos usar a função help (): help(package = ggplot2) Ou, simplesmente ?ggplot2 5.3.1 Carregar mais de um pacote usar uma das funções libraries () ou packages ()do pacote easypackages: install.packages(&quot;easypackages&quot;) library(easypackages) Com o pacote easypackages instalado, basta usar a função libraries(), com o nome dos pacotes entre aspas. libraries(&quot;readxl&quot;, &quot;dplyr&quot;, &quot;ggplot2&quot;, &quot;car&quot;) O mesmo pode ser feito com a função packages (). Outro pacote que gerencia pacotes do R é o pacman. Este pacote tem uma função p_load () que instala e carrega um ou mais pacotes. install.packages(&quot;pacman&quot;) library(pacman) Com o pacman instalado, usar a função p_load(), escrevendo o nome dos pacotes sem necessidade de aspas: p_load(readxl, dplyr, ggplot2, car) Ou: pacman::p_load(readxl, dplyr, ggplot2, car) O pacote pacman tem outas funções, entre elas uma que atualiza os pacotes: p_update(). Se usada sem especificar o pacote , ela atualiza todos. Para saber mais sobre o pacote pacman, use a ajuda. "],["funções.html", "Capítulo 6 Funções 6.1 O que são funções? 6.2 Criando funções", " Capítulo 6 Funções 6.1 O que são funções? As funções automatizam as tarefas no R. Elas podem ser criadas pelo pesquisador, de acordo com as suas necessidades. Entretanto, na maioria das vezes, elas são encontradas prontas, fazendo parte de um pacote. Pacotes contêm muitas funções que para serem executadas necessitam que o pacote esteja instalado e carregado. As funções para exercerem a sua ação devem receber dentro delas (entre parênteses) os argumentos que ela exige. Por exemplo, a função mean (), contida no R base, calcula a média de uma série de números (vetor numérico): É possível colocar este vetor em um objeto que pode receber qualquer nome, por exemplo, um conjunto de seis números, concatenados pela função c (), que receberão o nome de meus_dados: meus_dados &lt;- c(3, 5, 7, 9, 6, 7) mean(meus_dados) ## [1] 6.166667 A execução da função mean (), retorna o resultado arredondado de 6.17. Este mesmo resultado poderia ser obtido colocando o vetor dentro da função: mean(c(3, 5, 7, 9, 6, 7)) ## [1] 6.166667 Para se saber quais argumentos necessários para uma determinada função basta consulta a ajuda, onde se encontrará a documentação da mesma: ?mean Os principais argumentos da função mean () são: Argumento Significado x é um objeto R, numérico trim é a fração das observações (varia de 0 a 0,5) extraída de cada extremidade de x para calcular a média aparada na.rm valor lógico (TRUE ou FALSE) que indicam se os valores “perdidos” (NA) devem ser removidos antes que o cálculo continue 6.2 Criando funções 6.2.1 Fórmula geral As funções têm uma fórmula geral: nome.da.função &lt;- function (x){transformar x} Por exemplo, a área de um circulo é igual a \\(\\pi\\) x raio^2. Usando o R para calcular a área do círculo, podemos criar uma função que faça este trabalho: area.circ &lt;- function(r){ area &lt;- pi*r^2 return(area) } Ao executar essa função, é possível usá-la para calcular a área de um círculo, cujo raio é igual a 5 cm: r = 5 area.circ(5) ## [1] 78.53982 6.2.2 Outros exemplos Podemos criar uma função para o Indice de Massa Corporal, sabendo que ele é igual ao peso (kg) dividido pela altura^2: imc &lt;- function(peso, altura){ res &lt;- peso/altura^2 return(res) } Logo, o IMC de um indivíduo que tenha 67 kg e 1,7 m é: peso &lt;- 67 altura &lt;- 1.70 imc(67, 1.70) ## [1] 23.18339 6.2.3 Ativação de uma função Para ativar uma função previamente criada, usa-se a função nativa `source ()´. O argumento desta função é o caminho (diretório) onde se encontra a função buscada. Por exemplo, temos uma função para calcular o coeficiente de variação (coef_var): source (&quot;C:/Users/petro/Dropbox/Estatística/Bioestatística usando o R/Funções/coef_var.R&quot;) Vamos supor que tenhamos o seguinte conjunto de dados, referentes aos pesos de recém-nascidos a termo: pesoRN &lt;- c (3340,3345,3750,3650,3220,4070,3380,3970,3060,3180, 2865,2815,3245,2051,2630) coef_var(pesoRN) ## [1] 16.16144 Isto significa que o desvio padrão dos pesos dos recém-nascidos equivale a aproximadamente 16% da sua média. "],["manipulando-dados-no-rstudio.html", "Capítulo 7 Manipulando Dados no RStudio 7.1 Vetores 7.2 Objetos 7.3 Manipulando dados numéricos 7.4 Manipulando dados categóricos 7.5 Dataframes ou Banco de dados", " Capítulo 7 Manipulando Dados no RStudio 7.1 Vetores Vetor é uma estrutura de dados básica que desempenha um papel importante no R. É uma sequência de elementos que compartilham o mesmo tipo de dados (lógicos, inteiros, numéricos, caracteres, complexos ou brutos). Por exemplo, o vetor contendo 5 valores numéricos 1 , 2, 3, 4 e 5. v1 &lt;- c(1, 2, 3, 4, 5) v1 ## [1] 1 2 3 4 5 E o vetor contendo valores lógicos: v2 &lt;- c(TRUE, FALSE, TRUE, FALSE, FALSE) v2 ## [1] TRUE FALSE TRUE FALSE FALSE Um vetor pode conter caracteres que devem ser colocado entre aspas. Observe que os números na variável numChamada não são números propriamente ditos, representam cada um dos alunos, por exemplo, o número 1 é a aluna Clara: nomeAlunos &lt;- c(&quot;Gabriel&quot;, &quot;Felix&quot;, &quot;Geraldo&quot;, &quot;Nadine&quot;, &quot;Silvia&quot;, &quot;Clara&quot;) nomeAlunos ## [1] &quot;Gabriel&quot; &quot;Felix&quot; &quot;Geraldo&quot; &quot;Nadine&quot; &quot;Silvia&quot; &quot;Clara&quot; numChamada &lt;- c(&quot;3&quot;, &quot;2&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;1&quot;) numChamada ## [1] &quot;3&quot; &quot;2&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;1&quot; O vetor abaixo contém 5 números, sendo o número 3, colocado entre aspas, caracterizando um caractere e não um número. Veja o resultado! O R transformou todos em caracteres. v3 &lt;- c(1, 2, &quot;3&quot;, 4, 5) v3 ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; Para recuperar valores em um vetor, declara-se um índice dentro de operador colchetes. Por exemplo, o seguinte comando mostra como recuperar um membro do vetor. Como índice usamos a posição 3 para recuperar o terceiro membro. s &lt;- c (&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;ee&quot;) s [3] ## [1] &quot;cc&quot; Se o índice for negativo, ele excluirá o membro cuja posição tem o mesmo valor absoluto que o índice negativo. Por exemplo, o seguinte comando exclui o terceiro membro. s &lt;- c (&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;ee&quot;) s [-3] ## [1] &quot;aa&quot; &quot;bb&quot; &quot;dd&quot; &quot;ee&quot; Se um índice estiver fora do intervalo, um valor ausente será relatado por meio do símbolo NA. s &lt;- c (&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;ee&quot;) s [10] ## [1] NA Os vetores podem ser combinados por meio da função cbind (). Por exemplo, os dois vetores nomeAlunos e numChamada são combinados em um novo vetor contendo elementos de ambos os vetores. escola &lt;- c(nomeAlunos, numChamada) escola ## [1] &quot;Gabriel&quot; &quot;Felix&quot; &quot;Geraldo&quot; &quot;Nadine&quot; &quot;Silvia&quot; &quot;Clara&quot; ## [7] &quot;3&quot; &quot;2&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;1&quot; Escrito dessa maneira, a variável escola tem pouca utilidade. Se usarmos a funçãomatrix () que é uma estrutura bidimensional que necessita atributos de dimensão como numero de linhas (nrow =) e número de colunas (ncol =) escola &lt;- matrix(escola, nrow=2, ncol = 6, byrow = TRUE) escola ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] &quot;Gabriel&quot; &quot;Felix&quot; &quot;Geraldo&quot; &quot;Nadine&quot; &quot;Silvia&quot; &quot;Clara&quot; ## [2,] &quot;3&quot; &quot;2&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;1&quot; Agora, passa a ter mais sentido. Na primeira linha, temos os nomes dos alunos e, na segunda, os seus números na chamada. Assim, basta olhar para ver que a Clara é aluno número 1. Observe que os cochetes ([]) representam as linhas e as colunas. Quando representam uma linha temos primeiro um número e depois a virgula, por exemplo, a primeira linha é igual a [1,]. Na coluna, o número vem depois da vírgula. Se quisermos, recuperar o aluno da quinta coluna, temos que executar o seguinte comando, onde entre colchetes temos 1, como a primeira linha e 5 a quinta coluna: escola[1,5] ## [1] &quot;Silvia&quot; 7.2 Objetos Objeto é um pequeno espaço na memória do computador onde o R armazenará um valor ou o resultado de um comando, utilizando um nome arbitrariamente definido. Tudo criado pelo R pode se constituir em um objeto, por exemplo: uma variável, uma operação aritmética, um gráfico, uma matriz ou um modelo estatístico. Através de um objeto torna-se simples acessar os dados armazenados na memória. Ao criar um objeto, se faz uma declaração. Isto significa que se está afirmando, por exemplo, que uma determinada operação aritmética irá, agora, tornar-se um objeto que irá armazenar um determinado valor. As declarações são feitas uma em cada linha do RScript. Os comandos do R são compostos por duas partes: objetos e funções. Eles são separados por um operador de atribuição &lt;−, que deve ser entendido como “recebe” ou “criado a partir de”. Para digitar este operador basta digitar o sinal menor que (&lt;), seguido de hífen (–), sem espaços. Existe um atalho, clicando em Alt e hífen (-). O símbolo = pode ser usado no lugar de &lt;−, mas não é recomendado. O R possui várias classes de objetos. São eles: character: são caracteres – “a”, “sim”, “masculino” (escritos entre aspas) numeric: são decimais – 4.0, 2.34, 50.0 (no R o separador de decimal é o ponto) integer: inteiro – para criar uma variável que é um valor inteiro, chama-se a função as.integer (). Por exemplo, será criado o objeto x que receberá os valores 4.0, 2.34, 50.0, usando a função c (), que significa combinar ou concatenar: x &lt;- c (4.0, 2.34,50.0) as.integer (x) ## [1] 4 2 50 A execução da função exibiu no Console apenas os valores inteiros 4, 2, 50 do objeto x, ignorando os decimais. logical: retorna TRUE ou FALSE. A função is.integer() questiona se os valores são inteiros. Por exemplo, is.integer (x) ## [1] FALSE A saída foi FALSE, pois existem valores decimais. Para saber qual o tipo de objeto que está sendo usado, basta usar a função class (). 7.3 Manipulando dados numéricos Dados numéricos permitem qualquer operação matemática. Suponha que o salário de um empregado seja R$ 3800,00 para um trabalho de 220h mensais (ch): salario &lt;- 3800.00 ch &lt;- 220 Utilizando estes dados podemos fazer outros cálculos. Por exemplo: o salário-hora (sh), salário-hora arredondado para duas casas decimais (sh_r), usando a função round () e e o salário-hora como numero inteiro (sh_i), usando a função as.integer (). sh &lt;- salario/ch sh_r &lt;- round (salario/ch, 2) sh_i &lt;- as.integer((salario/ch)) A execução destes comandos não gerou nenhum um tipo de saída. Para ver a saída, temos que chamar cada uma delas: sh ## [1] 17.27273 sh_r ## [1] 17.27 sh_i ## [1] 17 7.4 Manipulando dados categóricos Vamos criar três objetos do tipo caractere (character). O primeiro. nome1, receberá o meu nome, o segundo, reberá o nome Epaminondas e o terceiro, o numero 10, escritos todos entre aspas. Observe que o número 10, na realidade, não está como um número, está caracterizando algo, por exemplo, um jogador de futebol, o camisa 10. nome1 &lt;- &quot;Petronio&quot; nome2 &lt;- &quot;Epaminondas&quot; camisa &lt;- &quot;10&quot; Estes dados não permitem operações matemáticas, como por exemplo: camisa + 5 nomes &lt;- nome1 + nome2 Esta operação vai gerar uma mensagem de erro: Error in camisa + 5 : non-numeric argument to binary operator Entretanto, estes comandos geram resultados compreensíveis: nomes &lt;- c(nome1, nome2) nomes ## [1] &quot;Petronio&quot; &quot;Epaminondas&quot; nomes[1] ## [1] &quot;Petronio&quot; nomes[2] ## [1] &quot;Epaminondas&quot; Para se saber a que classe um objeto pertence, usa-se a função class (). class(&quot;10&quot;) ## [1] &quot;character&quot; Uma outra maneira de representar objetos é como fator(factor). Os fatores são variáveis no R que assumem um número limitado de valores diferentes; são variáveis categóricas. Um dos usos mais importantes de fatores é na modelagem estatística. O armazenamento de dados como fatores garante que as funções de modelagem tratem esses dados corretamente. Os fatores no R são armazenados como um vetor de valores inteiros. A função factor () é usada para criar um fator. O único argumento necessário é um vetor de valores. Ambas as variáveis numéricas e de caractere podem ser transformadas em fatores, mas os níveis de um fator sempre serão valores de caractere. Você pode ver os níveis possíveis para um fator por meio do comando levels (). O objeto dados recebe vários números: dados &lt;- c(1,2,2,3,1,2,3,3,1,2,3,3,1) dados ## [1] 1 2 2 3 1 2 3 3 1 2 3 3 1 class(dados) ## [1] &quot;numeric&quot; A executar estes comandos, temos 13 números que constituem a variável dados. Esta variável é da classe numérica. Portanto, podemos realizar qualquer operação matemática. Por exemplo, a soma deles com a função sum () ou a raiz quadrada da soma com a função sqrt (): soma &lt;- sum(dados) soma ## [1] 27 sqrt (soma) ## [1] 5.196152 Entretanto, se transformarmos a variável dados em fator, não será possível realizar operações matemática, os números passarão a ser níveis, que podem apenas ser ordenados. Por exemplo, usar estes níveis para representar gravidade de uma doença: 1 = leve, 2 = moderada e 3 = grave. dados &lt;- factor(dados) dados ## [1] 1 2 2 3 1 2 3 3 1 2 3 3 1 ## Levels: 1 2 3 Observe que os valores são os mesmos, mas o significado é completamente diferente. Temos agora três níveis que podem ser ordenados e rotulados, acrescentando argumentos à função factor (): dados &lt;- factor(dados, levels = c(1, 2, 3), labels = c(&quot;leve&quot;, &quot;moderada&quot;, &quot;grave&quot;), ordered = TRUE) dados ## [1] leve moderada moderada grave leve moderada grave ## [8] grave leve moderada grave grave leve ## Levels: leve &lt; moderada &lt; grave Todos os números 1 foram trocados por leve, os 2 por moderada e os 3 por grave. A saída ainda mostra que existe uma hierarquia entre eles leve &lt; moderada &lt; grave. Se não tivéssemos ordenado, o resultado no R seria em ordem alfabética, como é o seu padrão. Já sabemos que são três níveis, mas ser quiséssemos apenas observar os níveis, basta usar a função levels (): levels(dados) ## [1] &quot;leve&quot; &quot;moderada&quot; &quot;grave&quot; 7.5 Dataframes ou Banco de dados Um banco de dados (dataframe) é uma tabela ou uma estrutura semelhante a uma matriz bidimensional em que cada coluna contém valores de uma variável e cada linha contém um conjunto de valores de cada coluna, representado um caso. As características de um banco de dados são: Os nomes das colunas não devem estar vazios. Os nomes das linhas devem ser exclusivos. Os dados armazenados em um banco de dados podem ser numéricos, fator ou tipo de caractere. Cada coluna deve conter o mesmo número de itens de dados. 7.5.1 Criando um banco de dados Em primeiro lugar vamos criar algumas variáveis. É importante nomear a variável de uma maneira que faça sentido e ter um padrão que permita a fácil memorização. pesoRN &lt;- c (3340, 3345, 3750, 3650, 3220, 4070,3380, 3970, 3060, 3180, 2865, 2815, 3245, 2051, 2630) compRN &lt;- c (50, 48, 52, 48, 50, 51, 50, 51, 47, 47, 47, 49, 51, 50, 44) sexo &lt;- c (2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2) tipoParto &lt;- c (1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1) idadeMae &lt;- c (40, 19, 26, 19, 32, 24, 27, 20, 21, 19, 23, 36, 21, 23, 23) Estas são um grupo de variáveis isoladas pertencentes a dados de 15 partos de uma maternidade, onde: pesoRN: peso do recém-nascido em gramas; compRN: comprimento do recém-nascido em cm; sexo: sexo do recém-nascido, 1 = M e 2 = F; tipoParto: se o parto foi 1 = normal ou 2 = cesáreo; idadeMae: idade da mãe do recém-nascido em anos. Essas variáveis podem ser reunidas em um banco dados, usando a função data.frame(). Será dado o nome de dadosNeonatos ao banco de dados criado. dadosNeonatos &lt;- data.frame (pesoRN, compRN, sexo, tipoParto, idadeMae) dadosNeonatos ## pesoRN compRN sexo tipoParto idadeMae ## 1 3340 50 2 1 40 ## 2 3345 48 2 1 19 ## 3 3750 52 2 2 26 ## 4 3650 48 1 1 19 ## 5 3220 50 1 2 32 ## 6 4070 51 1 2 24 ## 7 3380 50 2 1 27 ## 8 3970 51 1 2 20 ## 9 3060 47 1 1 21 ## 10 3180 47 1 1 19 ## 11 2865 47 2 1 23 ## 12 2815 49 2 2 36 ## 13 3245 51 1 1 21 ## 14 2051 50 1 1 23 ## 15 2630 44 2 1 23 Para acrecentar variáveis a este banco de dados, basta digitar no R Script o comando: dadosNeonatos$utiNeo &lt;- c (2,2,2,2,1,2,1,2,2,2,2,1,2,2,2) dadosNeonatos ## pesoRN compRN sexo tipoParto idadeMae utiNeo ## 1 3340 50 2 1 40 2 ## 2 3345 48 2 1 19 2 ## 3 3750 52 2 2 26 2 ## 4 3650 48 1 1 19 2 ## 5 3220 50 1 2 32 1 ## 6 4070 51 1 2 24 2 ## 7 3380 50 2 1 27 1 ## 8 3970 51 1 2 20 2 ## 9 3060 47 1 1 21 2 ## 10 3180 47 1 1 19 2 ## 11 2865 47 2 1 23 2 ## 12 2815 49 2 2 36 1 ## 13 3245 51 1 1 21 2 ## 14 2051 50 1 1 23 2 ## 15 2630 44 2 1 23 2 Na nova variável dadosNeonatos$utiNeo, temos que 1 = necessitou de UTI e 2 = não necessitou de UTI. Após o comando para criar a variável utiNeo, foi digitado o nome do banco de dados (dadosNeonatos) para visualizar o mesmo Para listar os nomes das variáveis (colunas) do banco de dados, basta usar a função names (): names(dadosNeonatos) ## [1] &quot;pesoRN&quot; &quot;compRN&quot; &quot;sexo&quot; &quot;tipoParto&quot; &quot;idadeMae&quot; ## [6] &quot;utiNeo&quot; Para ver a estrutura do banco de dados é útil a variável str (): str(dadosNeonatos) ## &#39;data.frame&#39;: 15 obs. of 6 variables: ## $ pesoRN : num 3340 3345 3750 3650 3220 ... ## $ compRN : num 50 48 52 48 50 51 50 51 47 47 ... ## $ sexo : num 2 2 2 1 1 1 2 1 1 1 ... ## $ tipoParto: num 1 1 2 1 2 2 1 2 1 1 ... ## $ idadeMae : num 40 19 26 19 32 24 27 20 21 19 ... ## $ utiNeo : num 2 2 2 2 1 2 1 2 2 2 ... Observa-se que todas as variáveis do banco de dados estão como numéricas. Entretanto, as variáveis sexo, tipoParto e utiNeo não são numéricas, são categóricas, onde na variável sexo, 1 = masculino e 2 = feminino, na variável tipoParto, 1 = normal e 2 = cesareo e na variável utiNeo, 1 = sim e 2 = não. Sem qualquer transformação, é possível realizar operações matemáticas, o que é “non sense”! Para transformar essas variáveis em um fator, é usada, como vimos, a função factor (): dadosNeonatos$sexo &lt;- factor (dadosNeonatos$sexo, levels = c (1,2), label = c (&quot;masculino&quot;, &quot;feminino&quot;)) dadosNeonatos$tipoParto &lt;- factor (dadosNeonatos $tipoParto, levels = c (1,2), labels = c (&quot;normal&quot;, &quot;cesareo&quot;)) dadosNeonatos$utiNeo &lt;- factor (dadosNeonatos$utiNeo, levels = c (1,2), labels = c (&quot;sim&quot;, &quot;não&quot;)) dadosNeonatos ## pesoRN compRN sexo tipoParto idadeMae utiNeo ## 1 3340 50 feminino normal 40 não ## 2 3345 48 feminino normal 19 não ## 3 3750 52 feminino cesareo 26 não ## 4 3650 48 masculino normal 19 não ## 5 3220 50 masculino cesareo 32 sim ## 6 4070 51 masculino cesareo 24 não ## 7 3380 50 feminino normal 27 sim ## 8 3970 51 masculino cesareo 20 não ## 9 3060 47 masculino normal 21 não ## 10 3180 47 masculino normal 19 não ## 11 2865 47 feminino normal 23 não ## 12 2815 49 feminino cesareo 36 sim ## 13 3245 51 masculino normal 21 não ## 14 2051 50 masculino normal 23 não ## 15 2630 44 feminino normal 23 não O banco de dados, agora, tem um aspecto mais amigável e compreensível. Se olharmos a sua estrutura, após as transformações, temos: str(dadosNeonatos) ## &#39;data.frame&#39;: 15 obs. of 6 variables: ## $ pesoRN : num 3340 3345 3750 3650 3220 ... ## $ compRN : num 50 48 52 48 50 51 50 51 47 47 ... ## $ sexo : Factor w/ 2 levels &quot;masculino&quot;,&quot;feminino&quot;: 2 2 2 1 1 1 2 1 1 1 ... ## $ tipoParto: Factor w/ 2 levels &quot;normal&quot;,&quot;cesareo&quot;: 1 1 2 1 2 2 1 2 1 1 ... ## $ idadeMae : num 40 19 26 19 32 24 27 20 21 19 ... ## $ utiNeo : Factor w/ 2 levels &quot;sim&quot;,&quot;não&quot;: 2 2 2 2 1 2 1 2 2 2 ... Depois das transformações, as variáveis passaram a ser classificadas como fatores, cada uma delas com dois níveis. 7.5.2 Salvando os arquivos no seu diretório Crie um diretório de trabalho em seu computador. Coloque um nome sugestivo, por exemplo, Bioestatística_R e salve todos os arquivos, relacionados ao tema, nele. Para obter o arquivo dadosMater.xlsx, você deve clicar aqui e baixar para o para seu diretório de trabalho. Este link abrirá o arquivo a partir do Dropbox. Siga os seguintes passos: Clique nos … (três pontos) à direita; No menu que aparece, escolha a opção “Baixar” ; Clique nesta opção e baixe o arquivo para seu diretório de trabalho ou seu projeto (aconselhado), por exemplo, Bioestatística_R. Para o arquivo dadosMater15.csv, clique aqui e proceda da mesma maneira que para o dadosMater.xlsx. Feito! Os arquivos dadosMater.xlsx e dadosMater15.csv, agora, estão em seu diretório de trabalho, prontos para serem manipulados! 7.5.3 Importando um banco de dados 7.5.3.1 Importando dados de um arquivo CSV A função read.csv () e read.csv2 () podem ser utilizadas para importar arquivos CSV. Existe uma pequena diferença entre elas. Dois argumentos dessas funções têm padrão diferentes em cada uma. São eles: sep (separador de colunas) e dec (separador de decimais). Em read.csv (), o padrão ésep = ”,” e dec = ”.” e em read.csv2 () o padrão é sep = “;” e dec = ”,”. Quando se usa o read.csv () há necessidade de informar o separador e o decimal, pois senão ele usará o padrão inglês e o arquivo não será lido. Já com read.csv2(), que o usa o padrão brasileiro, não há necessidade de informar ao R qual o separador de colunas e nem o separador dos decimais. Quando o arquivo se encontra no diretório de trabalho, como é o caso do dadosMater15.csv, procede-se da seguinte maneira: dadosMater&lt;- read.csv2 (&quot;dadosMater15.csv&quot;) Ou, para os casos onde seu arquivo não se encontra no diretório de trabalho: dadosMater &lt;- read.csv2 (file.choose()) 7.5.3.2 Importando dados de um arquivo Excel Existem várias formas de importar do Excel, recomenda-se usar a função read_excel () do pacote readxl. Quando o arquivo se encontra no diretório de trabalho, como é o caso do dadosMater15.xlsx, procede-se da seguinte maneira: library(readxl) dadosMater &lt;- read_excel (&quot;dadosMater15.xlsx&quot;, sheet = 1) O argumento sheet = 1, significa que se está abrindo a planilha 1 do arquivo. Este argumento é importante se houver mais de uma planilha, caso contrário, ele é opcional. Se você não estiver no diretório de trabalho, proceda como visto na importação de dados CSV. dadosMater &lt;- read_excel (file.choose()) "],["sumarização-dos-dados.html", "Capítulo 8 Sumarização dos dados 8.1 Medidas de tendência central 8.2 Medidas de Dispersão 8.3 Funções descritivas no R", " Capítulo 8 Sumarização dos dados Um conjunto de dados brutos devem ser descritos, organizando-os em forma de tabelas e de gráficos que dão uma “imagem” dos dados, permitindo que se observe o seu aspecto e como eles se comportam. As maneiras mais usadas para resumir o conjunto de dados são: Primeiro, um valor em torno do qual os dados têm uma tendência para se reunir ou se agrupar, denominado de medida sumária de localização ou medida de tendência central. Em segundo lugar, um valor que mede o grau em que os dados se dispersam, denominado de medida de dispersão ou variabilidade. Para trabalhar nesta seção, vamos usar os seguintes pacotes: pacman::p_load(dplyr, readxl, psych) E o arquivo dadosMater15.xlsxque pode ser obtido aqui e baixado para o seu diretório de trabalho. Agora, vamos criar um objeto, mater15, para receber os dados, a partir do diretório de trabalho, executando o seguinte código: mater15 &lt;- read_excel (&quot;C:/Users/petro/Dropbox/Git_repositório/Arquivos/dadosMater15.xlsx&quot;) O caminho (path), usado no comando, é o do arquivo no computador do autor. Você deverá escrever o caminho no seu computador. Observe o uso de barra comum (não invertida). Se o arquivo foi baixado no diretório de trabalho ativo, basta escrever \"dadosMater15.xlsx\". 8.1 Medidas de tendência central 8.1.1 Média A média ( \\(\\overline{x}\\) ) é a mais usada medida de tendência central. Ela é calculada pela razão entre a soma de todas as observações de um conjunto de dados e o total de observações. Com os dados dos pesos dos recém-nascidos (pesoRN) do arquivo dadosMater15.xlsx, podemos calcular a média aritmética, usando a função mean (). A média é mais adequada para medidas numéricas simétricas. mean(mater15$pesoRN) ## [1] 3238.067 Se no conjunto de dados houvesse algum valor ausente (missing), o comando mostraria o resultado como NA (not available). Para corrigir isto, basta colocar o argumento na.rm = TRUE na função mean(). Assim, o R vai retornar a média, ignorando os valores ausentes. mean (mater15$pesoRN, na.rm = TRUE) ## [1] 3238.067 8.1.2 Mediana A mediana (Md) representa o valor central em uma série ordenada de valores. Assim, metade dos valores será igual ou menor que o valor mediano e a outra metade igual ou maior do que ele. No R, usa-se a função median () para calcular o valor da mediana. Vanos utilizar a variável mater15$apgar1. Como o Apgar é um escore, a medida resumidora mais adequada é a mediana. Em primeiro lugar verifica-se a presença NA: summary (mater15$apgar1) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 4.000 8.000 8.000 7.667 8.500 9.000 Não existe dados omissos nessa amostra. Portanto, o uso do argumento na.rm = TRUE é desnecessário. median (mater15$apgar1) ## [1] 8 8.1.3 Moda Moda (Mo) é o valor que ocorre com maior frequência em um conjunto de dados. Tem o menor nível de sofisticação. É usada primariamente para dados nominais porque há simplesmente contagem dos valores. Ao contrário das outras medidas de tendência central, a moda não informa nada sobre a ordem das variáveis ou variação dentro das variáveis. O R não tem uma função embutida padrão para calcular a moda. Portanto, há necessidade de ser criada uma função de usuário para calcular a moda. Foi criada uma função para calcular a moda: moda &lt;- function(x) { z &lt;- table(as.vector(x)) names(z)[z == max(z)]} Usando esta função pode-se calcular a moda para a variável mater15$apgar1. moda (mater15$apgar1) ## [1] &quot;8&quot; A moda para essa variável é igual a mediana. 8.1.4 Quantil Uma medida de localização bastante utilizada são os quantis que são pontos estabelecidos em intervalos regulares que dividem a amostra em subconjuntos iguais. Se estes subconjuntos são em número de 100, são denominados de percentis; se são em número de em 10, são os decis e em número de 4, são os quartis. A função apropriada no R para obter o quantil é quantile (). Para determinar os três quartis do peso dos recém-nascidos (mater15$pexoRN), usa-se: quantile (mater15$pesoRN, c (0.25, 0.50, 0.75)) ## 25% 50% 75% ## 2962.5 3245.0 3515.0 Observe que o percentil 50º é igual a mediana. O percentil 75º é o ponto do conjunto de dados onde 75% dos recém-nascidos têm um peso inferior a 3515,0g e 25% está acima deste valor. 8.1.5 Média aparada As médias aparadas são estimadores robustos da tendência central. Para calcular uma média aparada, é removida uma quantidade predeterminada de observações em cada lado de uma distribuição e realizada a média das observações restantes. Um exemplo de média aparada é a própria mediana. A base R tem como calcular a média aparada acrescentando o argumento trim =, proporção a ser aparada. Se for aparado 20%, usa-se trim = 0.2. isto significa que serão removidos 20% dos dados dos dois extremos. No caso da amostra de 15 recém-nascidos, serão removidos três valores mais baixos e três valores mais altos, passando a mostra a ter 9 valores, e a média aparada será a média destes 9 valores. O comando para obter a média aparada é: mean (mater15$pesoRN, na.rm = TRUE, trim = 0.20) ## [1] 3253.889 8.2 Medidas de Dispersão 8.2.1 Amplitude A amplitude de um grupo de medições é definida como a diferença entre a maior observação e a menor. No conjunto de dados dos pesos dos recém-nascidos, a amplitude pode ser obtida, no R, com a função range (), que retorna o valor mínimo e o máximo. range (mater15$pesoRN, na.rm = TRUE) ## [1] 2051 4070 8.2.2 Intervalo Interquartil A intervalo interquartil (IIQ), também conhecido como amplitude interquartil (AIQ) é uma forma de média aparada. É simplesmente a diferença entre o terceiro e o primeiro quartil, ou seja, a diferença entre o percentil 75 e o percentil 25. Considere a escolaridade (anosEst) das parturientes da amostra dadosMater15.xlsx. Os percentis 25 e 75 são obtidos por: quantile (mater15$anosEst, c(0.25,0.75)) ## 25% 75% ## 6 8 Também podeser usada a função summary (): summary(mater15$anosEst) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 4 6 7 7 8 11 Portanto, o IIQ está entre 6 a 8 anos de estudo ou, 8 – 6 = 2 anos de estudos completos. Em outras palavras, 50% das mulheres desta amostra têm de 6 a 8 anos de estudo. 8.2.3 Variância e Desvio Padrão A variância e o desvio padrão fornecem uma indicação de quão aglomerados em torno da média os dados de uma amostra estão. Estes tipos de medidas representam desvios da média. No R existem as funções sd () e var (), também incluídas no R base, que facilmente calculam essas medidas de dispersão. Usando a variável mater15$pesoRN, tem-se: sd (mater15$pesoRN) ## [1] 523.318 var(mater15$pesoRN) ## [1] 273861.8 O desvio padrão é a raiz quadrada da variância: sqrt (var(mater15$pesoRN)) ## [1] 523.318 A variância e desvio padrão são medidas de variabilidade. Representam quão bem a média representa os dados. Informa se ela está funcionando bem como modelo. Pequenos desvios padrão mostram que existe pouca variabilidade nos dados, que eles se aproximam da média. Quando existe um grande desvio padrão, a média não é muito precisa para representar os dados. 8.2.4 Coeficiente de Variação O desvio padrão por si só tem limitações. Um desvio padrão de duas unidades pode ser considerado pequeno para um conjunto de valores cuja média é 100. Entretanto, se a média for 5, ele se torna muito grande. Além disso, o desvio padrão por ser expresso na mesma unidade dos dados, não permite aplicá-lo na comparação de dois ou mais conjunto de dados que têm unidades diferentes. Para eliminar essas limitações, é possível caracterizar a dispersão ou variabilidade dos dados em termos relativos, usando uma medida denominada Coeficiente de Variação (CV), também conhecido como como Desvio Padrão Relativo ou Coeficiente de Variação de Pearson. É expresso, em geral como uma porcentagem, sendo definido como a razão do desvio padrão pela média: \\[ CV = \\frac{s}{\\overline{x}} \\] Multiplicando o valor da equação por 100 tem-se o CV percentual. O R não possui uma função específica para calcular o CV. Foi criada uma função específica para isso,já multiplicada por 100. coef_var &lt;- function (valores) { (sd(valores, na.rm=T) / mean(valores, na.rm=T))*100} Portanto, o CV da variável mater15$pesoRN é igual a: coef_var (mater15$pesoRN) ## [1] 16.16144 Se usarmos outra variável do banco de dados, por exemplo, mater15$idadeMae, o CV será igual a: coef_var (mater15$idadeMae) ## [1] 25.83343 O peso do recem-nascido tem um CV = 16.2 e a idade materna um CV = 25.8, mostrando que esta tem uma maior variabilidade. Quanto menor o desvio padrão, menor o CV e, consequentemente, menor a variabilidade. Um CV \\(\\ge\\) 50%, sugere que a variável tenha uma distribuição assimétrica. 8.3 Funções descritivas no R 8.3.1 Funções describe e describeBy Essas funções pertencem ao pacote psych e podem ser usada para se obter medidas descritivas, como média, desvion padrão, mediana, média aparada (padrão = 0.1),desvio absoluto mediano, , mínimo, máximo, assimetria (skew), curtose, erro padrão: describe (mater15$pesoRN) ## vars n mean sd median trimmed mad min max range skew ## X1 1 15 3238.07 523.32 3245 3265.38 563.39 2051 4070 2019 -0.4 ## kurtosis se ## X1 -0.3 135.12 A variável sexo do recém-nascido encontra-se no banco de dados como uma variável numérica: class (mater15$sexo) ## [1] &quot;numeric&quot; E deve ser transformada para se conhecer o peso dos recém-nascidos por sexo: mater15$sexo &lt;- factor (mater15$sexo, label = c (&quot;masculino&quot;, &quot;feminino&quot;)) Depois da transformação, podemos usar a função describeBy () para obter o peso para cada sexo: describeBy (mater15$pesoRN, group = mater15$sexo) ## ## Descriptive statistics by group ## group: masculino ## vars n mean sd median trimmed mad min max range skew ## X1 1 8 3305.75 633.07 3232.5 3305.75 437.37 2051 4070 2019 -0.6 ## kurtosis se ## X1 -0.64 223.82 ## ----------------------------------------------------- ## group: feminino ## vars n mean sd median trimmed mad min max range skew ## X1 1 7 3160.71 397.93 3340 3160.71 607.87 2630 3750 1120 0.02 ## kurtosis se ## X1 -1.71 150.4 8.3.2 Funções group_by e summarise Essas funções estão contidas no pacote dplyr (clique aqui para explorar mais este pacote). Elas podem ser usadas juntas com o operador pipe. Este é utilizado para encadear funções, ou seja, chama-se uma função e, em seguida, passar o resultado para outra função e dessa para outra, de uma forma que seja facilmente legível. Por exemplo: mater15 %&gt;% group_by(sexo) %&gt;% summarise (n = n (), media = mean(pesoRN), dp = sd (pesoRN), mediana = median(pesoRN), IQQ = IQR (pesoRN), cv = coef_var (pesoRN)) ## # A tibble: 2 × 7 ## sexo n media dp mediana IQQ cv ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 masculino 8 3306. 633. 3232. 580 19.2 ## 2 feminino 7 3161. 398. 3340 522. 12.6 Os comandos chamam o banco de dado mater15, filtram a variável sexo deste banco e depois calculam varias medidas decritivas da variável pesoRN. 8.3.3 Função summary A função summary () fornece a os quantis, o máximo, o mínimo e a média de uma variável ou do banco de dados. summary(mater15$idadeMae) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 19.00 20.50 23.00 24.87 26.50 40.00 Para maiores esclarecimentos, consulte: https://statsandr.com/blog/descriptive-statistics-in-r/ http://www.sthda.com/english/wiki/descriptive-statistics-and-graphics https://learningstatisticswithr.com/book/descriptives.html "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
