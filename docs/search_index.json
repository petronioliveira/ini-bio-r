[["gráficos.html", "Capítulo 10 Gráficos 10.1 Pacotes necessários 10.2 Carregar os Dados 10.3 Visão Geral do dadosMater.xlsx 10.4 Gráfico de Setores (Pizza) 10.5 Gráficos de Barras 10.6 Gráfico de barra de erro 10.7 Gráfico de barra de erro com o ggplot2 10.8 Gráfico de Barra de Erro com a Função lineplot.CI () 10.9 Histograma 10.10 Histograma usando o ggplot2 10.11 Gráficos de Densidade 10.12 Restaurando o padrão de notação científica 10.13 Leitura Adicional", " Capítulo 10 Gráficos 10.1 Pacotes necessários pacman::p_load(readxl, dplyr, plotrix, ggplot2, forcats, Hmisc, sciplot) 10.2 Carregar os Dados Para este capítulo, serão usados dados da maternidade escola do Hospital Geral de Caxias do Sul, incluídos nos arquivos dadosMater e dadosRNT. Estes arquivos devem ser baixados para o seu diretório de trabalho. Crie um objeto mater para receber os dadosMater.xlsx e um com o nome RNT para receber os dadosRNT, a partir do diretório de trabalho, executando os seguinte códigos: mater &lt;- read_excel (&quot;C:/Users/petro/Dropbox/Git_repositório/Arquivos/dadosMater.xlsx&quot;) RNT &lt;- read_excel (&quot;C:/Users/petro/Dropbox/Git_repositório/Arquivos/dadosRNT.xlsx&quot;) 10.3 Visão Geral do dadosMater.xlsx Inicialmente, vamos ter uma visão geral do banco de dados, usando a função glimpse (), do pacote dplyr. Ela nos mostra como os dados estão dispostos e a classe de cada variável. O banco tem 1368 linhas (casos) e 30 colunas (variáveis). Todas as variáveis estão como numéricas (dbl). glimpse (mater) ## Rows: 1,368 ## Columns: 30 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1… ## $ idadeMae &lt;dbl&gt; 42, 29, 19, 31, 34, 29, 30, 34, 17, 32, 32, 31, 32, 19, 40, … ## $ altura &lt;dbl&gt; 1.65, 1.66, 1.72, 1.55, 1.60, 1.50, 1.54, 1.63, 1.68, 1.50, … ## $ peso &lt;dbl&gt; 69.9, 78.0, 81.0, 74.0, 60.0, 60.0, 75.5, 61.0, 57.0, 70.0, … ## $ ganhoPeso &lt;dbl&gt; 3.9, 16.5, 5.0, 43.0, 15.0, 11.4, 10.5, 9.0, 15.0, 11.4, 18.… ## $ anosEst &lt;dbl&gt; 3, 11, 9, 5, 7, 8, 4, 6, 10, 1, 4, 4, 18, 8, 2, 7, 3, 7, 11,… ## $ cor &lt;dbl&gt; 2, 1, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, … ## $ eCivil &lt;dbl&gt; 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, … ## $ renda &lt;dbl&gt; 1.45, 2.41, 1.93, 1.45, 0.48, 0.96, 1.20, 2.41, 2.17, 0.72, … ## $ fumo &lt;dbl&gt; 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, … ## $ quantFumo &lt;dbl&gt; 0, 0, 0, 0, 0, 10, 20, 0, 0, 0, 0, 0, 0, 0, 5, 0, 10, 0, 0, … ## $ prenatal &lt;dbl&gt; 2, 1, 2, 2, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, … ## $ para &lt;dbl&gt; 5, 0, 0, 1, 2, 1, 2, 1, 0, 4, 1, 4, 0, 1, 6, 0, 3, 0, 1, 1, … ## $ droga &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, … ## $ ig &lt;dbl&gt; 29, 33, 33, 33, 33, 33, 33, 33, 34, 34, 35, 35, 35, 35, 36, … ## $ tipoParto &lt;dbl&gt; 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, … ## $ pesoPla &lt;dbl&gt; 224, 1118, 452, 432, 574, 600, 632, 710, 600, 310, 690, 522,… ## $ sexo &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, … ## $ pesoRN &lt;dbl&gt; 1035, 2300, 1580, 1840, 2475, 1830, 1800, 2200, 2180, 1685, … ## $ compRN &lt;dbl&gt; 35.5, 45.0, 39.0, 41.0, 47.0, 41.0, 44.0, 44.0, 47.0, 48.0, … ## $ pcRN &lt;dbl&gt; 28, 32, 28, 32, 32, 29, 32, 32, 30, 27, 33, 32, 34, 34, 34, … ## $ apgar1 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 5, 5… ## $ apgar5 &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 7, 8… ## $ utiNeo &lt;dbl&gt; 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, … ## $ obito &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … ## $ hiv &lt;dbl&gt; 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … ## $ sifilis &lt;dbl&gt; 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, … ## $ rubeola &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … ## $ toxo &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, … ## $ infCong &lt;dbl&gt; 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, … 10.3.1 Transformação e criação de variáveis Vamos começar limitando o banco de dados, selecionando apenas as variáveis que serão usados neste tutorial: mater1 &lt;- mater %&gt;% select(idadeMae, anosEst, fumo, para) glimpse(mater1) ## Rows: 1,368 ## Columns: 4 ## $ idadeMae &lt;dbl&gt; 42, 29, 19, 31, 34, 29, 30, 34, 17, 32, 32, 31, 32, 19, 40, 1… ## $ anosEst &lt;dbl&gt; 3, 11, 9, 5, 7, 8, 4, 6, 10, 1, 4, 4, 18, 8, 2, 7, 3, 7, 11, … ## $ fumo &lt;dbl&gt; 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2… ## $ para &lt;dbl&gt; 5, 0, 0, 1, 2, 1, 2, 1, 0, 4, 1, 4, 0, 1, 6, 0, 3, 0, 1, 1, 2… A seguir, vamos transformar a variável fumo como fator e criar duas novas variáveis a partir das variáveis idadeMae e anosEst, que também serão fatores: mater1$fumo &lt;- factor (mater1$fumo, levels = c(1, 2), labels = c(&quot;sim&quot;, &quot;não&quot;)) mater1$categIdade &lt;- cut (mater$idadeMae, breaks=c (13,20,36,46), labels = c (&quot;&lt;20a&quot;, &quot;20-35a&quot;, &quot;&gt;35a&quot;), right = FALSE, ordered_result = TRUE, include.lowest = TRUE) mater1$escolaridade &lt;- cut (mater1$anosEst, breaks= c (0,10,13,18), right = FALSE, labels = c(&quot;Fundamental&quot;, &quot;Médio&quot;, &quot;Superior&quot;), include.lowest = TRUE) glimpse (mater1) ## Rows: 1,368 ## Columns: 6 ## $ idadeMae &lt;dbl&gt; 42, 29, 19, 31, 34, 29, 30, 34, 17, 32, 32, 31, 32, 19, 4… ## $ anosEst &lt;dbl&gt; 3, 11, 9, 5, 7, 8, 4, 6, 10, 1, 4, 4, 18, 8, 2, 7, 3, 7, … ## $ fumo &lt;fct&gt; não, não, não, não, não, sim, sim, não, não, não, não, nã… ## $ para &lt;dbl&gt; 5, 0, 0, 1, 2, 1, 2, 1, 0, 4, 1, 4, 0, 1, 6, 0, 3, 0, 1, … ## $ categIdade &lt;ord&gt; &gt;35a, 20-35a, &lt;20a, 20-35a, 20-35a, 20-35a, 20-35a, 20-35… ## $ escolaridade &lt;fct&gt; Fundamental, Médio, Fundamental, Fundamental, Fundamental… 10.4 Gráfico de Setores (Pizza) Cada segmento (fatia) do gráfico de pizza deve ser proporcional à frequência da categoria que representa. A desvantagem do gráfico de pizza é que ele só pode representar uma variável, portanto, há necessidade de um gráfico separado para cada variável que se deseja representar. Além disso, um gráfico de pizza pode perder clareza se ele é usado para representar mais do que quatro ou cinco categorias. Os gráficos de pizza são amplamente conhecidos como uma maneira ruim de visualizar informações. Com variável mater1$escolaridade e, usando a função table (), criamos uma tabela (tab_escola): tab_escola &lt;- table(mater1$escolaridade) tab_escola ## ## Fundamental Médio Superior ## 983 358 27 Ou tab_escola &lt;- xtabs(~mater1$escolaridade, data = mater) tab_escola Usando as informações da tab_escola, cria-se o vetor escola: escola &lt;- c(983, 358, 27) Com a função pie (), vamos construir o gráfico de setores: pie (escola, labels = c (&quot;Fundamental&quot;, &quot;Médio&quot;, &quot;Superior&quot;), main = NULL, col = c (&quot;skyblue&quot;, &quot;cyan&quot;, &quot;lightblue1&quot;)) É possível, também, construir uma pizza em 3 D, usando a função pie3D () do pacote plotrix: pie3D (escola, labels = c(&quot;Fundamental&quot;, &quot;Médio&quot;, &quot;Superior&quot;), radius = 0.9, explode = 0.1, col = c (&quot;skyblue&quot;, &quot;cyan&quot;, &quot;lightblue1&quot;), main=&quot;Grau de Instrução das Parturientes&quot;) 10.4.1 Gráfico de setores com o ggplot2 Inicialmente, cria-se um dataframe, que chamaremos de df_escola, onde grupo são as categorias de escolaridade, n é a frequência de cada categoria e pro é a proporção de cada categoria (frequência de cada categoria dividido pelo total): df_escola &lt;- data.frame( grupo = c(&quot;Fundamental&quot;, &quot;Médio&quot;, &quot;Superior&quot;), n = c (983, 358, 27), prop = round(c((983/1368)*100, (358/1368)*100, (27/1368)*100),1)) df_escola ## grupo n prop ## 1 Fundamental 983 71.9 ## 2 Médio 358 26.2 ## 3 Superior 27 2.0 Vamos agora transformar o dataframe criado, usando as funções arrange (), que colocará as categorias em ordem descentente, e mutate (), que calculará a posição dos rótulos no eixo y. Ambas funções pertecem ao pacote dplyr: df_escola &lt;- df_escola %&gt;% arrange(desc(grupo)) %&gt;% mutate(lab.ypos = cumsum(prop) - 0.5*prop) df_escola ## grupo n prop lab.ypos ## 1 Superior 27 2.0 1.00 ## 2 Médio 358 26.2 15.10 ## 3 Fundamental 983 71.9 64.15 Para criar gráfico de pizza com o ggplot2, usaremos como função chave o geom_bar () + coord_polar (). Adicionremos texto com a função geom_text () e as cores de preenchimento com scale_color_manual (). Será aplicado por último theme_void () para remover eixos, fundos, etc. As cores escolhidas são colocas em objeto minhas_cores: minhas_cores &lt;- c(&quot;steelblue&quot;, &quot;salmon&quot;, &quot;yellow&quot;) Gráfico ggplot(df_escola, aes(x = &quot;&quot;, y = prop, fill = grupo)) + geom_bar(width = 1, stat = &quot;identity&quot;, color = &quot;white&quot;) + coord_polar(&quot;y&quot;, start = 0)+ geom_text(aes(y = lab.ypos, label = prop), color = &quot;black&quot;, size = 5)+ scale_fill_manual(values = minhas_cores) + theme_void() Voltaremos ao ggplot2 mais adiante. 10.4.2 Uma variação do gráfico de pizza: gráfico de rosca (Donut chart) ggplot(df_escola, aes(x = 2, y = prop, fill = grupo)) + geom_bar(stat = &quot;identity&quot;, color = &quot;white&quot;) + coord_polar(theta = &quot;y&quot;, start = 0)+ geom_text(aes(y = lab.ypos, label = prop), color = &quot;black&quot;, size = 5)+ scale_fill_manual(values = minhas_cores) + theme_void()+ xlim(0.5, 2.5) 10.5 Gráficos de Barras 10.5.1 Gráfico de Barras Simples Começamos construindo uma tabela usando a variável mater1$categIdade: tab_idade &lt;- table(mater1$categIdade) Após, usando a função barplot (), construímos o gráfico de barras: barplot(tab_idade) A seguir, usando outros argumentos próprios da função, melhoramos o aspecto do gráfico. O argumento ylim = vai corrigir o limite do eixo y que ficou em 800 e deveria ser 1000; col = tornará as barras de cor azul metálico (steelblue); ylab = e xlab = colocam rótulos nos eixos; las = 1 faz o texto do eixo y ficar horizontal e cex.lab = 1.2 aumenta o texto dos rótulos em 20%. A função box (bty = \"L\") (opcional) faz os eixos se encontraren em 0. barplot(tab_idade, ylim = c (0,1000), col= &quot;steelblue&quot;, border = &quot;black&quot;, ylab = &quot;Frequência absoluta&quot;, xlab = &quot;Faixa etária&quot;, cex.lab = 1.2, las = 1) box(bty = &quot;L&quot;) Além disso, é possível fazer outras alterações para tornar o gráfico mais informativo, como as frequência de cada barra colocada no topo das mesmas: 1º Passo: Criar um gráfico de barras , colocando-o em um objeto x, que conterá a coordenada X do centro de cada uma das barras. Para verificar isso basta executar o objeto x: 2º Passo: colocar a tabela tab_idade com um objeto y da classe matriz: 3º Passo: usar a funçãoo text () para colocar os valores: x &lt;- barplot(tab_idade, ylim = c (0,1000), col= &quot;springgreen&quot;, border = &quot;black&quot;, ylab = &quot;Frequência absoluta&quot;, xlab = &quot;Faixa etária&quot;, cex.lab = 1.2, las = 1) box(bty = &quot;L&quot;) y &lt;- as.matrix(tab_idade) text (x, y, labels = as.character(y), adj = c(0.5, 2), col = &quot;black&quot;) O gráfico de barras simples pode ser construído com as barras horizontais. Basta usar o argumento horiz = TRUE e adaptando os eixoa x e y, para essa situação: barplot(tab_idade, xlim = c (0,1000), col= &quot;salmon&quot;, border = &quot;black&quot;, ylab= &quot;&quot;, xlab = &quot;Frequência absoluta&quot;, cex.lab = 1.3, horiz=TRUE, las = 1) box(bty = &quot;L&quot;) 10.5.2 Gráfico de Barras Empilhadas Para este tipo de apresentação usamos, praticamente, os mesmos argumentos vistos para gerar um gráfico de barra simples. Como existem duas variáveis, há necessidade de avisar ao R como elas devem aparecer. Para isso, foi usado o argumento beside = FALSE, que informa que as barras não estarão uma ao lado da outra e sim empilhadas. O padrão é as barras ficarem uma ao lado da outra. Acresscenta-se uma legenda com a função legend() na parte superior esquerda (topleft). O argumento bty = \"n\" informa que não queremos um quadro ao redor da legenda e fill = c (\"dimgrey\", \"salmon\") são as cores das barras. tab_fumo &lt;- table (mater1$fumo, mater1$categIdade) tab_fumo ## ## &lt;20a 20-35a &gt;35a ## sim 35 235 31 ## não 184 757 126 barplot (tab_fumo, beside=FALSE, ylim = c (0,1000), xlab=&quot;Faixa Etária das gestantes&quot;, ylab = &quot;Frequência&quot;, col = c (&quot;dimgrey&quot;, &quot;salmon&quot;), cex.lab = 1.2, cex.axis = 1.2, cex.names = 1.2) box(bty = &quot;L&quot;) legend (legend=c (&quot;Fumantes&quot;, &quot;Não Fumantes&quot;), fill = c (&quot;dimgrey&quot;, &quot;salmon&quot;), bty=&quot;n&quot;, cex = 1, &quot;topleft&quot;) 10.5.3 Gráfico de Barras Lado a Lado É igual a anterior, apenas com o argumento beside = TRUE. barplot (tab_fumo, beside=TRUE, ylim = c (0,800), xlab=&quot;Faixa Etária das gestantes&quot;, ylab = &quot;Frequência&quot;, col = c (&quot;dimgrey&quot;, &quot;salmon&quot;), cex.lab = 1.2, cex.axis = 1.2, cex.names = 1.2) box(bty = &quot;L&quot;) legend (legend=c (&quot;Fumantes&quot;, &quot;Não Fumantes&quot;), fill = c (&quot;dimgrey&quot;, &quot;salmon&quot;), bty=&quot;n&quot;, cex = 1, &quot;topleft&quot;) 10.5.4 Gráfico de barras com variáveis discretas A variável para é uma variável numérica discreta e, para representá-la o mais adequado é usar um gráfico de barras simples. tab_filhos&lt;- table (mater1$para) barplot (tab_filhos, col = &quot;salmon&quot;, xlab=&quot;Número de filhos anteriores ao atual&quot;, ylab = &quot;Frequência&quot;, ylim = c(0, 500), cex.lab = 1.2, cex.axis = 1.2, cex.names = 1.2) 10.5.5 Gráfico de Barras Simples com o ggplot2 Ele segue as seguintes etapas: Crie os dados como um data.frame table(mater1$categIdade) ## ## &lt;20a 20-35a &gt;35a ## 219 992 157 df_idade &lt;- data.frame ( categ = c (&quot;&lt;20a&quot;, &quot;20-35a&quot;, &quot;&gt;35a&quot;), freq = c (219, 992, 157)) df_idade ## categ freq ## 1 &lt;20a 219 ## 2 20-35a 992 ## 3 &gt;35a 157 Para a construção do gráfico: Comece chamando a função ggplot (); Em seguida, especifique o objeto de dados, df_idade. Tem que ser um dataframe. Necessita uma variável numérica(freq) e outra categórica (categ); Então vem a estética, definida na função aes (): defina a variável categórica para o eixo X, use a numérica para o eixo Y Finalmente, chame geom_bar () . Você deve especificar stat = \"identity\" para este tipo de conjunto de dados e a largura das barras width = 0.7. Para controlar outros aspectos: Cores: color = é para a borda da barra e fill = é a cor do preenchimento. Para estabelecer a cor de cada barra manualmnete, use scale_fill_manual(); Para remover a legenda, use theme(legend.position = \"none\") Pa um aspecto clássico, use theme_classic (); Para colocar as frequências no topo das barras, use geom_text (); para que as barras fiquem horizontais, usar coord_flip (), fazendo ajustes para o texto das frequências e para os rótulos dos eixos. df_idade %&gt;% mutate(categ = factor(categ, levels=c(&quot;&lt;20a&quot;, &quot;20-35a&quot;, &quot;&gt;35a&quot;))) %&gt;% ggplot(aes(x = categ, y=freq, fill = categ)) + geom_bar(stat = &quot;identity&quot;, width = 0.7) + ylab(&quot;Frequência&quot;) + xlab(&quot;Idade da Parturiente&quot;) + scale_fill_manual(values = c(&quot;lightsalmon1&quot;, &quot;salmon&quot;, &quot;lightsalmon4&quot;)) + theme_classic() + theme(legend.position=&quot;none&quot;) + geom_text(aes(label=paste0(freq)), vjust=1.5, colour=&quot;white&quot;) 10.6 Gráfico de barra de erro 10.6.1 Exploração e manipulação arquivo RNT.xlsx O arquivo RNT.xlsx tem a seguinte estruturs: glimpse (RNT) ## Rows: 1,085 ## Columns: 30 ## $ id &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1… ## $ idadeMae &lt;dbl&gt; 28, 31, 27, 28, 18, 28, 22, 28, 25, 14, 29, 26, 31, 22, 28, … ## $ altura &lt;dbl&gt; 1.50, 1.55, 1.60, 1.58, 1.76, 1.63, 1.54, 1.55, 1.56, 1.51, … ## $ peso &lt;dbl&gt; 48.5, 65.0, 60.0, 47.0, 65.5, 72.0, 65.0, 74.0, 70.0, 56.7, … ## $ ganhoPeso &lt;dbl&gt; 11.0, 24.0, 15.0, 9.0, 6.5, 13.0, 8.5, 10.0, 11.4, 8.3, 8.0,… ## $ anosest &lt;dbl&gt; 6, 5, 8, 8, 7, 11, 6, 5, 9, 6, 11, 11, 8, 6, 8, 8, 11, 6, 5,… ## $ cor &lt;dbl&gt; 2, 1, 2, 1, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, … ## $ ecivil &lt;dbl&gt; 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, … ## $ renda &lt;dbl&gt; 3.133, 0.723, 2.410, 1.687, 1.928, 1.920, 2.651, 2.530, 0.48… ## $ fumo &lt;dbl&gt; 2, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … ## $ quantFumo &lt;dbl&gt; 0, 0, 20, 0, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … ## $ prenatal &lt;dbl&gt; 1, 2, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, … ## $ para &lt;dbl&gt; 1, 2, 2, 1, 1, 0, 2, 3, 5, 0, 0, 0, 1, 1, 2, 1, 1, 1, 2, 1, … ## $ droga &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … ## $ ig &lt;dbl&gt; 37, 37, 37, 38, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, … ## $ tipoParto &lt;dbl&gt; 1, 2, 2, 1, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, … ## $ pesoPla &lt;dbl&gt; 550, 530, 530, 780, 752, 247, 530, 550, 462, 600, 684, 566, … ## $ sexo &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … ## $ pesoRN &lt;dbl&gt; 3285, 3100, 3100, 2800, 3270, 1440, 3365, 3650, 2605, 3200, … ## $ compRN &lt;dbl&gt; 48.5, 47.0, 47.0, 48.0, 49.0, 41.5, 50.0, 48.0, 46.0, 50.0, … ## $ pcRN &lt;dbl&gt; 33, 34, 34, 34, 35, 30, 35, 36, 34, 34, 34, 33, 34, 33, 34, … ## $ apgar1 &lt;dbl&gt; 8, 9, 8, 9, 4, 3, 8, 9, 9, 9, 9, 6, 9, 8, 6, 8, 8, 6, 8, 8, … ## $ apgar5 &lt;dbl&gt; 9, 9, 9, 10, 9, 6, 9, 9, 9, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, … ## $ utiNeo &lt;dbl&gt; 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, … ## $ obito &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … ## $ hiv &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, … ## $ sifilis &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … ## $ rubeola &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … ## $ toxo &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, … ## $ infCong &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, … Vamos selecionar apenas as variáveis pesoRN e sexo que serão recebidas por um objeto de nome dados: dados &lt;- RNT %&gt;% select(pesoRN, sexo) glimpse (dados) ## Rows: 1,085 ## Columns: 2 ## $ pesoRN &lt;dbl&gt; 3285, 3100, 3100, 2800, 3270, 1440, 3365, 3650, 2605, 3200, 340… ## $ sexo &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … Observamos que a variável sexo está como numérica e deve ser transformada para fator: dados$sexo &lt;- factor (dados$sexo, levels = c(1, 2), label = c(&quot;masc&quot;, &quot;fem&quot;)) glimpse (dados) ## Rows: 1,085 ## Columns: 2 ## $ pesoRN &lt;dbl&gt; 3285, 3100, 3100, 2800, 3270, 1440, 3365, 3650, 2605, 3200, 340… ## $ sexo &lt;fct&gt; masc, masc, masc, masc, masc, masc, masc, masc, masc, masc, mas… Agora, temos um conjunto de dados com uma variável numérica (pesoRN) e uma variável categórica (sexo), como fator. 10.6.1.1 Resumos numericos Vamos conhecer o resumo numérico da variável pesoRN, usando as funções group_by () e summarise () do pacote dplyr: resumo &lt;- dados %&gt;% group_by(sexo) %&gt;% summarise(n = n (), media = mean(pesoRN), dp = sd (pesoRN), mediana = median (pesoRN), IIQ = IQR (pesoRN)) %&gt;% mutate(ep = dp/sqrt(n)) %&gt;% mutate(me = ep * qt(1 - (0.05/2), n - 1)) resumo ## # A tibble: 2 × 8 ## sexo n media dp mediana IIQ ep me ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 masc 592 3274. 458. 3270 551. 18.8 37.0 ## 2 fem 493 3147. 458. 3165 615 20.6 40.5 Este resumo fornece o n, a média, o desvio padrão, a mediana, o intervalo interquartil, o erro padrão e a margem de erro. 10.6.1.2 Extrair dois subconjuntos de dados: meninos e meninas meninas &lt;- dados %&gt;% filter(sexo == &quot;fem&quot;) meninos &lt;- dados %&gt;% filter(sexo == &quot;masc&quot;) 10.6.1.3 Resumos numéricos dos dois subgrupos n1 &lt;- nrow (meninos) n2 &lt;- nrow (meninas) mu_m &lt;- mean(meninos$pesoRN) mu_f &lt;- mean(meninas$pesoRN) dp_m &lt;- sd(meninos$pesoRN) dp_f &lt;- sd(meninas$pesoRN) ep_m &lt;- dp_m/sqrt(n1) ep_f &lt;- dp_f/sqrt(n2) 10.6.2 Criação do gráfico de barra de erro Vamos seguir as seguintes etapas: 1ª Etapa: Criação de um vetor que recebe o nome barras com as médias dos subgrupos; Este vetor será usado na construção do gráfico de barras; Incluir este em outro objeto, denominado de bp, que receberá o gráfico de barras. 2ª Etapa: Calcular a margem de erro (\\(me = 1.96 × dp\\)) em cada um dos grupos; Com as margens de erro construir os limites do intervalo de confiança (\\({média} \\pm {me}\\)). 3ª Etapa: Adcionar ao gráfico de barras os limites calculados, usando a função errbar () do pacote Hmisc. barras &lt;- c (mu_m, mu_f) bp &lt;- barplot(barras, ylim=c(0,4500), ylab = &quot;Peso do Recém-nascido (g)&quot;, cex.lab = 1.3, cex.axis = 1.3, cex.names = 1.3, space = c(0,0.5), names.arg=c(&quot;Meninos&quot;, &quot;Meninas&quot;), col = c(&quot;lightblue&quot;, &quot; pink2&quot;)) box(bty = &quot;L&quot;) me_m &lt;- 1.96 * dp_m me_f &lt;- 1.96 * dp_f lim_inf &lt;- c(mu_m - me_m, mu_f - me_f) round (lim_inf, 2) ## [1] 2376.18 2249.69 lim_sup &lt;- c(mu_m + me_m, mu_f + me_f) round (lim_sup, 2) ## [1] 4172.08 4044.09 errbar(bp, barras, lim_sup, lim_inf, add=TRUE, xlab=NULL) OBS.: Foram usados os desvios padrão na construção da margem de erro, mas o IC95% usa o erro padrão. Entretanto, como este é muito menor que o dp, optou-se pelo dp, por uma questão didática. 10.7 Gráfico de barra de erro com o ggplot2 Vamos usar os mesmos dados anteriores e o resumo numérico do resumo. 10.7.1 Construção do gráfico Primeiro se constroi uma camada criando um gráfico de barra com a função geom_bar (). Após, usando a função geom_errorbar (), cria-se as barras de erro e a função geom_point () coloca um ponto no valor das médias. Os demais comandos são os rótulos e tamanho dos textos, bem como o tema usado (theme_classic()): p&lt;- ggplot(resumo, aes(x=sexo, y=media, fill=sexo)) + geom_bar(stat=&quot;identity&quot;, width = 0.4, color=&quot;black&quot;) + geom_point() + geom_errorbar(aes(ymin=media-dp, ymax=media+dp), width=0.1, position=position_identity()) + scale_fill_manual(values=c(&quot;lightskyblue1&quot;,&quot;pink2&quot;))+ theme(legend.position=&quot;none&quot;) print(p) # Final p+labs(title=&quot;Peso do RN por Sexo&quot;, x=&quot;&quot;, y = &quot;Peso do Recém-nascido (g)&quot;)+ theme_classic() + theme(legend.position=&quot;none&quot;) 10.7.2 Gráfico com apenas as barras superiores ggplot(resumo, aes(x=sexo, y=media, fill=sexo)) + geom_bar(stat=&quot;identity&quot;, width = 0.4, color=&quot;black&quot;) + geom_point() + geom_errorbar(aes(ymin=media, ymax=media+dp), width=0.1, position=position_dodge(.9)) + labs(title=&quot;Peso do RN por Sexo&quot;, x=&quot;&quot;, y = &quot;Peso do Recém-nascido (g)&quot;)+ theme_classic() + theme(legend.position=&quot;none&quot;) + scale_fill_manual(values=c(&quot;lightskyblue1&quot;,&quot;pink2&quot;)) 10.8 Gráfico de Barra de Erro com a Função lineplot.CI () Uma função simples para realizar um gráfico com barra de erro é a lineplot.CI () do pacote sciplot. Vamos criar o mesmo gráfico anterior, peso médio do recém-nascido por sexo, usando o erro padrão. O padrão é retornar \\({média} \\pm {ep}\\). Entretanto, isto pode ser modificado com o argumento ci.fun= que usa a margem de erro, ou seja, \\(me = 1.96 × ep\\). lineplot.CI (dados$sexo, dados$pesoRN, type = &quot;p&quot;, xlab=&quot;&quot;, ylab=&quot;Peso do RN (g)&quot;, lty = 2, las = 1, lwd = 3, err.col = c(&quot;lightskyblue&quot;,&quot;pink3&quot;), ci.fun= function(x) c(mean(x)-se(x)*qnorm(0.975), mean(x)+se(x)*qnorm(0.975))) O argumento type = \"p\" determina um gráfico com pontos, mas sem linha de união. Se for substituído por type = \"l\", aparecem apenas as linhas de união e type = \"b\", aparecem ambos. 10.9 Histograma O histograma é uma ferramenta gráfica que fornece informações sobre o formato da distribuição e dispersão dos dados, permitindo verificar se existe ou não simetria. É usado para dados contínuos. No histograma as frequências observadas são representadas por intervalos de classes de ocorrência que estão no eixo x e a altura das barras, representando a frequência de cada intervalo, no eixo y. A área de cada barra é proporcional à porcentagem de observações de cada intervalo. O R base possui uma função, denominada de hist () que constroi o histograma e possui vários argumentos: Argumento Significado x um vetor numérico usado na construção do histograma; breaks especifica a quantidade de barras; freq lógico; se TRUE, o gráfico do histograma é uma representação de frequências, o componente de contagens do resultado; se FALSE, densidades de probabilidade, densidade de componentes, são plotados. O padrão é TRUE; col cor a ser usada para preencher as barras. O padrão de NULL produz barras não preenchidas; border cor da borda ao redor das barras. O padrão é usar a cor de primeiro plano padrão; main, xlab, ylab rótulo do título, do eixo x e do eixo y; xlim, ylim limites do eixo x e do eixo y. … 10.9.1 Histograma Simples Fazer um sumário dos dados para se ter uma ideia de como eles se comportam. Para isso, usar a função summary () que nos entrega os valores mínimo, máximo, média, mediana e os percentis 25 e 75: summary(dados$pesoRN) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1425 2920 3215 3216 3505 4950 Vamos construir um histograma com a função hist (): hist(dados$pesoRN) Observando o histograma gerado, verifica-se alguns incovenientes que podem ser melhorados para tornar a sua aparência mais agradável. Os eixos apresentam textos com o nome da variável no eixo x e em língua inglesa no eixo y; O eixo y tem um limite superior menor do que a barra mais alta; O gráfico é entregue na cor cinza, que conforme o interesse pode ser modificada; O número de barras pode ser modificado com o argumento breaks. Existe uma função no R que permite calcular o número de intervalos, usando a regra de Sturges. Entretanto, na maioria das vezes, é o objetivo do estudo quem determina o número de barras e nem sempre o R obedece ao argumento breaks = . nclass.Sturges(dados$pesoRN) ## [1] 12 A função nclass.Sturges() fornece um resultado igual a 12. hist(dados$pesoRN, breaks = 12, ylim = c (0, 500), xlim = c (1000, 5000), main= NULL, ylab = &quot;Frequência&quot;, xlab = &quot;Peso do Recém-nascido (g)&quot;, col = &quot;steelblue&quot;, las = 1) box(bty = &quot;L&quot;) Observa-se que o histograma fica igual ao anterior, mudando a cor das barras, o limite do eixo y e os rótulos dos eixos. O R não modificou o número de barras. Modifique o número de barras e veja o que acontece! 10.9.2 Histograma com curva normal sobreposta Eventualmente, para melhor comparar a distribuição dos dados, usamos uma curva normal sobreposta que servirá de indicador. 1º Passo: Construir um histograma de densidade, que é a proporção de todas as observações que se enquadram dentro do intervalo. Na função hist (), modificar o argumento para freq = TRUE. 2º Passo: Adicionar uma curva normal ao histograma, usando a função curve (). Calcular antes a média e o desvio padrão da variável dados$pesoRN. Como os valores da densidade no eixo y estão como notação científica (\\(4e-04 = 4.10^{-4}\\)) , usamos a função options(scipen = 999) para remover e para retornar ao padrão, no final, usar options (scipen = 0, digits = 7): mu &lt;- mean(dados$pesoRN) dp &lt;- sd(dados$pesoRN) options (scipen = 999) hist(dados$pesoRN, xlim = c(1000, 5000), ylim = c(0, 0.001), main= NULL, ylab = &quot;Densidade&quot;, xlab = &quot;Peso do Recém-nascido (g)&quot;, col =&quot;steelblue&quot;, freq = FALSE, border = &quot;white&quot;) box (bty = &quot;L&quot;) curve (dnorm (x, mean=mu, sd=dp), col=&quot;red&quot;, lty=1, lwd=2, add=TRUE) 10.9.3 Componentes do Histograma Ao se criar um objeto da classe histogram, podemos verificar uma lista de componentes do mesmo, colocando o mesmo em um objeto, no exemplo, h. h &lt;- hist(dados$pesoRN, breaks = 8, xlim = c(1000, 5000), ylim = c(0, 500), main= NULL, ylab = &quot;Frequência&quot;, xlab = &quot;Peso do Recém-nascido (g)&quot;, col =&quot;seagreen2&quot;, freq = TRUE, border = &quot;white&quot;) box (bty = &quot;L&quot;) h ## $breaks ## [1] 1000 1500 2000 2500 3000 3500 4000 4500 5000 ## ## $counts ## [1] 2 6 54 281 469 228 40 5 ## ## $density ## [1] 0.000003686636 0.000011059908 0.000099539171 0.000517972350 0.000864516129 ## [6] 0.000420276498 0.000073732719 0.000009216590 ## ## $mids ## [1] 1250 1750 2250 2750 3250 3750 4250 4750 ## ## $xname ## [1] &quot;dados$pesoRN&quot; ## ## $equidist ## [1] TRUE ## ## attr(,&quot;class&quot;) ## [1] &quot;histogram&quot; Estes componentes podem ser usados para outras análises. 10.9.4 Construção de um histograma usando os componentes Pode-se colocar os valores correspondentes às barras usando os componentes do histograma. hist(dados$pesoRN, breaks = 8, ylim = c(0, 500), xlim = c(1000, 5000), main= NULL, ylab = &quot;Frequência&quot;, xlab = &quot;Peso do Recém-nascido (g)&quot;, col = &quot;salmon&quot;) box (bty = &quot;L&quot;) text (h$mids, h$counts, labels = h$counts, adj= c(0.5, -0.5)) 10.10 Histograma usando o ggplot2 A função geom_histogram () do pacote ggplot2 é usada para a construção do histograma. dados %&gt;% ggplot(aes(x=pesoRN))+ geom_histogram(color = &quot;black&quot;, fill = &quot;lightblue&quot;, breaks = seq(1000, 5000, 250)) + theme_classic() + ylab(&quot;Frequência&quot;) + xlab(&quot;Peso do Recém-nascido (g)&quot;) Podemos acrescentar uma linha na média com a função geom_vline (): dados %&gt;% ggplot(aes(x=pesoRN))+ geom_histogram(color = &quot;black&quot;, fill = &quot;peachpuff&quot;, breaks = seq(1000, 5000, 250)) + theme_classic() + ylab(&quot;Frequência&quot;) + xlab(&quot;Peso do Recém-nascido (g)&quot;) + geom_vline(aes (xintercept = mean(pesoRN)), color = &quot;red&quot;, linetype = &quot;dashed&quot;, size = 1) 10.10.1 Histograma por grupos Usando o peso dos recém-nascidos(pesoRN) e o sexo do banco de dados RNT, vamos calcular a média e o desvio padrão por sexo, usando o pacote dplyr: medias &lt;- dados %&gt;% group_by(sexo) %&gt;% summarise(media = mean(pesoRN), DP = sd (pesoRN)) medias ## # A tibble: 2 × 3 ## sexo media DP ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 masc 3274. 458. ## 2 fem 3147. 458. Construção dos histogramas sobrepostos com suas respectivas médias: ggplot(dados, aes(x=pesoRN, fill=sexo)) + geom_histogram(position = &quot;identity&quot;, bins = 20) + scale_fill_manual(values=c(&quot;lightskyblue1&quot;, &quot;pink2&quot;)) + theme_classic() + geom_vline(data=medias, aes(xintercept=media, color=sexo), linetype=&quot;dashed&quot;) + xlab(&quot;Peso do Recém-nascido (g)&quot;) + ylab (&quot;Frequência&quot;) 10.11 Gráficos de Densidade plot (density(dados$pesoRN), frame = FALSE, ylim = c(0, 0.001), main = &quot;&quot;, ylab = &quot;Densidade&quot;, xlab = &quot;Peso do recém-nascido (g)&quot;) polygon (density (dados$pesoRN), col= &quot;turquoise&quot;) box (bty = &quot;L&quot;) 10.12 Restaurando o padrão de notação científica Como vimos no 2º Passo da construção do histograma com curva normal sobreposta, usou-se a função options(scipen = 999) que , agora, vamos voltar ao padrão, usando o comando: options (scipen= 0, digits= 7) 10.13 Leitura Adicional Holtz Y. Barplot.The R Graph Gallery. Disponível em: https://www.r-graph-gallery.com/barplot.html. Acesso em 14/08/2022. Holtz Y. Barplot.The R Graph Gallery. Disponível em: https://www.r-graph-gallery.com/4-barplot-with-error-bar.html. Acesso em 14/08/2022. H. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016. Disponível em: https://ggplot2.tidyverse.org/reference/geom_bar.html Acesso em 14/08/2022 Kassambara A. ggplot2 histogram plot : Quick start guide. STHDA - Statistical tools for high-throughput data analysis. Disponível em: http://www.sthda.com/english/wiki/ggplot2-histogram-plot-quick-start-guide-r-software-and-data-visualization. Acesso em 15/08/2022. Oliveira Filho PF. Epidemiologia e Bioestatística: fundamentos para a leitura crítica. 2ª ed. Rio de Janeiro: Editora Rubio Ltda; 2022. Gráficos;p.13-24. "]]
