[["manipulando-dados-no-rstudio.html", "Capítulo 7 Manipulando Dados no RStudio 7.1 Vetores 7.2 Objetos 7.3 Manipulando dados numéricos 7.4 Manipulando dados categóricos 7.5 Dataframes ou Banco de dados", " Capítulo 7 Manipulando Dados no RStudio 7.1 Vetores Vetor é uma estrutura de dados básica que desempenha um papel importante no R. É uma sequência de elementos que compartilham o mesmo tipo de dados (lógicos, inteiros, numéricos, caracteres, complexos ou brutos). Por exemplo, o vetor contendo 5 valores numéricos 1 , 2, 3, 4 e 5. v1 &lt;- c(1, 2, 3, 4, 5) v1 ## [1] 1 2 3 4 5 E o vetor contendo valores lógicos: v2 &lt;- c(TRUE, FALSE, TRUE, FALSE, FALSE) v2 ## [1] TRUE FALSE TRUE FALSE FALSE Um vetor pode conter caracteres que devem ser colocado entre aspas. Observe que os números na variável numChamada não são números propriamente ditos, representam cada um dos alunos, por exemplo, o número 1 é a aluna Clara: nomeAlunos &lt;- c(&quot;Gabriel&quot;, &quot;Felix&quot;, &quot;Geraldo&quot;, &quot;Nadine&quot;, &quot;Silvia&quot;, &quot;Clara&quot;) nomeAlunos ## [1] &quot;Gabriel&quot; &quot;Felix&quot; &quot;Geraldo&quot; &quot;Nadine&quot; &quot;Silvia&quot; &quot;Clara&quot; numChamada &lt;- c(&quot;3&quot;, &quot;2&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;1&quot;) numChamada ## [1] &quot;3&quot; &quot;2&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;1&quot; O vetor abaixo contém 5 números, sendo o número 3, colocado entre aspas, caracterizando um caractere e não um número. Veja o resultado! O R transformou todos em caracteres. v3 &lt;- c(1, 2, &quot;3&quot;, 4, 5) v3 ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; Para recuperar valores em um vetor, declara-se um índice dentro de operador colchetes. Por exemplo, o seguinte comando mostra como recuperar um membro do vetor. Como índice usamos a posição 3 para recuperar o terceiro membro. s &lt;- c (&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;ee&quot;) s [3] ## [1] &quot;cc&quot; Se o índice for negativo, ele excluirá o membro cuja posição tem o mesmo valor absoluto que o índice negativo. Por exemplo, o seguinte comando exclui o terceiro membro. s &lt;- c (&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;ee&quot;) s [-3] ## [1] &quot;aa&quot; &quot;bb&quot; &quot;dd&quot; &quot;ee&quot; Se um índice estiver fora do intervalo, um valor ausente será relatado por meio do símbolo NA. s &lt;- c (&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;ee&quot;) s [10] ## [1] NA Os vetores podem ser combinados por meio da função cbind (). Por exemplo, os dois vetores nomeAlunos e numChamada são combinados em um novo vetor contendo elementos de ambos os vetores. escola &lt;- c(nomeAlunos, numChamada) escola ## [1] &quot;Gabriel&quot; &quot;Felix&quot; &quot;Geraldo&quot; &quot;Nadine&quot; &quot;Silvia&quot; &quot;Clara&quot; &quot;3&quot; ## [8] &quot;2&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;1&quot; Escrito dessa maneira, a variável escola tem pouca utilidade. Se usarmos a funçãomatrix () que é uma estrutura bidimensional que necessita atributos de dimensão como numero de linhas (nrow =) e número de colunas (ncol =) escola &lt;- matrix(escola, nrow=2, ncol = 6, byrow = TRUE) escola ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] &quot;Gabriel&quot; &quot;Felix&quot; &quot;Geraldo&quot; &quot;Nadine&quot; &quot;Silvia&quot; &quot;Clara&quot; ## [2,] &quot;3&quot; &quot;2&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;1&quot; Agora, passa a ter mais sentido. Na primeira linha, temos os nomes dos alunos e, na segunda, os seus números na chamada. Assim, basta olhar para ver que a Clara é aluno número 1. Observe que os cochetes ([]) representam as linhas e as colunas. Quando representam uma linha temos primeiro um número e depois a virgula, por exemplo, a primeira linha é igual a [1,]. Na coluna, o número vem depois da vírgula. Se quisermos, recuperar o aluno da quinta coluna, temos que executar o seguinte comando, onde entre colchetes temos 1, como a primeira linha e 5 a quinta coluna: escola[1,5] ## [1] &quot;Silvia&quot; 7.2 Objetos Objeto é um pequeno espaço na memória do computador onde o R armazenará um valor ou o resultado de um comando, utilizando um nome arbitrariamente definido. Tudo criado pelo R pode se constituir em um objeto, por exemplo: uma variável, uma operação aritmética, um gráfico, uma matriz ou um modelo estatístico. Através de um objeto torna-se simples acessar os dados armazenados na memória. Ao criar um objeto, se faz uma declaração. Isto significa que se está afirmando, por exemplo, que uma determinada operação aritmética irá, agora, tornar-se um objeto que irá armazenar um determinado valor. As declarações são feitas uma em cada linha do RScript. Os comandos do R são compostos por duas partes: objetos e funções. Eles são separados por um operador de atribuição &lt;−, que deve ser entendido como “recebe” ou “criado a partir de”. Para digitar este operador basta digitar o sinal menor que (&lt;), seguido de hífen (–), sem espaços. Existe um atalho, clicando em Alt e hífen (-). O símbolo = pode ser usado no lugar de &lt;−, mas não é recomendado. O R possui várias classes de objetos. São eles: character: são caracteres – “a”, “sim”, “masculino” (escritos entre aspas) numeric: são decimais – 4.0, 2.34, 50.0 (no R o separador de decimal é o ponto) integer: inteiro – para criar uma variável que é um valor inteiro, chama-se a função as.integer (). Por exemplo, será criado o objeto x que receberá os valores 4.0, 2.34, 50.0, usando a função c (), que significa combinar ou concatenar: x &lt;- c (4.0, 2.34,50.0) as.integer (x) ## [1] 4 2 50 A execução da função exibiu no Console apenas os valores inteiros 4, 2, 50 do objeto x, ignorando os decimais. logical: retorna TRUE ou FALSE. A função is.integer() questiona se os valores são inteiros. Por exemplo, is.integer (x) ## [1] FALSE A saída foi FALSE, pois existem valores decimais. Para saber qual o tipo de objeto que está sendo usado, basta usar a função class (). 7.3 Manipulando dados numéricos Dados numéricos permitem qualquer operação matemática. Suponha que o salário de um empregado seja R$ 3800,00 para um trabalho de 220h mensais (ch): salario &lt;- 3800.00 ch &lt;- 220 Utilizando estes dados podemos fazer outros cálculos. Por exemplo: o salário-hora (sh), salário-hora arredondado para duas casas decimais (sh_r), usando a função round () e e o salário-hora como numero inteiro (sh_i), usando a função as.integer (). sh &lt;- salario/ch sh_r &lt;- round (salario/ch, 2) sh_i &lt;- as.integer((salario/ch)) A execução destes comandos não gerou nenhum um tipo de saída. Para ver a saída, temos que chamar cada uma delas: sh ## [1] 17.27273 sh_r ## [1] 17.27 sh_i ## [1] 17 7.4 Manipulando dados categóricos Vamos criar três objetos do tipo caractere (character). O primeiro. nome1, receberá o meu nome, o segundo, reberá o nome Epaminondas e o terceiro, o numero 10, escritos todos entre aspas. Observe que o número 10, na realidade, não está como um número, está caracterizando algo, por exemplo, um jogador de futebol, o camisa 10. nome1 &lt;- &quot;Petronio&quot; nome2 &lt;- &quot;Epaminondas&quot; camisa &lt;- &quot;10&quot; Estes dados não permitem operações matemáticas, como por exemplo: camisa + 5 nomes &lt;- nome1 + nome2 Esta operação vai gerar uma mensagem de erro: Error in camisa + 5 : non-numeric argument to binary operator Entretanto, estes comandos geram resultados compreensíveis: nomes &lt;- c(nome1, nome2) nomes ## [1] &quot;Petronio&quot; &quot;Epaminondas&quot; nomes[1] ## [1] &quot;Petronio&quot; nomes[2] ## [1] &quot;Epaminondas&quot; Para se saber a que classe um objeto pertence, usa-se a função class (). class(&quot;10&quot;) ## [1] &quot;character&quot; Uma outra maneira de representar objetos é como fator(factor). Os fatores são variáveis no R que assumem um número limitado de valores diferentes; são variáveis categóricas. Um dos usos mais importantes de fatores é na modelagem estatística. O armazenamento de dados como fatores garante que as funções de modelagem tratem esses dados corretamente. Os fatores no R são armazenados como um vetor de valores inteiros. A função factor () é usada para criar um fator. O único argumento necessário é um vetor de valores. Ambas as variáveis numéricas e de caractere podem ser transformadas em fatores, mas os níveis de um fator sempre serão valores de caractere. Você pode ver os níveis possíveis para um fator por meio do comando levels (). O objeto dados recebe vários números: dados &lt;- c(1,2,2,3,1,2,3,3,1,2,3,3,1) dados ## [1] 1 2 2 3 1 2 3 3 1 2 3 3 1 class(dados) ## [1] &quot;numeric&quot; A executar estes comandos, temos 13 números que constituem a variável dados. Esta variável é da classe numérica. Portanto, podemos realizar qualquer operação matemática. Por exemplo, a soma deles com a função sum () ou a raiz quadrada da soma com a função sqrt (): soma &lt;- sum(dados) soma ## [1] 27 sqrt (soma) ## [1] 5.196152 Entretanto, se transformarmos a variável dados em fator, não será possível realizar operações matemática, os números passarão a ser níveis, que podem apenas ser ordenados. Por exemplo, usar estes níveis para representar gravidade de uma doença: 1 = leve, 2 = moderada e 3 = grave. dados &lt;- factor(dados) dados ## [1] 1 2 2 3 1 2 3 3 1 2 3 3 1 ## Levels: 1 2 3 Observe que os valores são os mesmos, mas o significado é completamente diferente. Temos agora três níveis que podem ser ordenados e rotulados, acrescentando argumentos à função factor (): dados &lt;- factor(dados, levels = c(1, 2, 3), labels = c(&quot;leve&quot;, &quot;moderada&quot;, &quot;grave&quot;), ordered = TRUE) dados ## [1] leve moderada moderada grave leve moderada grave grave ## [9] leve moderada grave grave leve ## Levels: leve &lt; moderada &lt; grave Todos os números 1 foram trocados por leve, os 2 por moderada e os 3 por grave. A saída ainda mostra que existe uma hierarquia entre eles leve &lt; moderada &lt; grave. Se não tivéssemos ordenado, o resultado no R seria em ordem alfabética, como é o seu padrão. Já sabemos que são três níveis, mas ser quiséssemos apenas observar os níveis, basta usar a função levels (): levels(dados) ## [1] &quot;leve&quot; &quot;moderada&quot; &quot;grave&quot; 7.5 Dataframes ou Banco de dados Um banco de dados (dataframe) é uma tabela ou uma estrutura semelhante a uma matriz bidimensional em que cada coluna contém valores de uma variável e cada linha contém um conjunto de valores de cada coluna, representado um caso. As características de um banco de dados são: Os nomes das colunas não devem estar vazios. Os nomes das linhas devem ser exclusivos. Os dados armazenados em um banco de dados podem ser numéricos, fator ou tipo de caractere. Cada coluna deve conter o mesmo número de itens de dados. 7.5.1 Criando um banco de dados Em primeiro lugar vamos criar algumas variáveis. É importante nomear a variável de uma maneira que faça sentido e ter um padrão que permita a fácil memorização. pesoRN &lt;- c (3340, 3345, 3750, 3650, 3220, 4070,3380, 3970, 3060, 3180, 2865, 2815, 3245, 2051, 2630) compRN &lt;- c (50, 48, 52, 48, 50, 51, 50, 51, 47, 47, 47, 49, 51, 50, 44) sexo &lt;- c (2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 2) tipoParto &lt;- c (1, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1) idadeMae &lt;- c (40, 19, 26, 19, 32, 24, 27, 20, 21, 19, 23, 36, 21, 23, 23) Estas são um grupo de variáveis isoladas pertencentes a dados de 15 partos de uma maternidade, onde: pesoRN: peso do recém-nascido em gramas; compRN: comprimento do recém-nascido em cm; sexo: sexo do recém-nascido, 1 = M e 2 = F; tipoParto: se o parto foi 1 = normal ou 2 = cesáreo; idadeMae: idade da mãe do recém-nascido em anos. Essas variáveis podem ser reunidas em um banco dados, usando a função data.frame(). Será dado o nome de dadosNeonatos ao banco de dados criado. dadosNeonatos &lt;- data.frame (pesoRN, compRN, sexo, tipoParto, idadeMae) dadosNeonatos ## pesoRN compRN sexo tipoParto idadeMae ## 1 3340 50 2 1 40 ## 2 3345 48 2 1 19 ## 3 3750 52 2 2 26 ## 4 3650 48 1 1 19 ## 5 3220 50 1 2 32 ## 6 4070 51 1 2 24 ## 7 3380 50 2 1 27 ## 8 3970 51 1 2 20 ## 9 3060 47 1 1 21 ## 10 3180 47 1 1 19 ## 11 2865 47 2 1 23 ## 12 2815 49 2 2 36 ## 13 3245 51 1 1 21 ## 14 2051 50 1 1 23 ## 15 2630 44 2 1 23 Para acrecentar variáveis a este banco de dados, basta digitar no R Script o comando: dadosNeonatos$utiNeo &lt;- c (2,2,2,2,1,2,1,2,2,2,2,1,2,2,2) dadosNeonatos ## pesoRN compRN sexo tipoParto idadeMae utiNeo ## 1 3340 50 2 1 40 2 ## 2 3345 48 2 1 19 2 ## 3 3750 52 2 2 26 2 ## 4 3650 48 1 1 19 2 ## 5 3220 50 1 2 32 1 ## 6 4070 51 1 2 24 2 ## 7 3380 50 2 1 27 1 ## 8 3970 51 1 2 20 2 ## 9 3060 47 1 1 21 2 ## 10 3180 47 1 1 19 2 ## 11 2865 47 2 1 23 2 ## 12 2815 49 2 2 36 1 ## 13 3245 51 1 1 21 2 ## 14 2051 50 1 1 23 2 ## 15 2630 44 2 1 23 2 Na nova variável dadosNeonatos$utiNeo, temos que 1 = necessitou de UTI e 2 = não necessitou de UTI. Após o comando para criar a variável utiNeo, foi digitado o nome do banco de dados (dadosNeonatos) para visualizar o mesmo Para listar os nomes das variáveis (colunas) do banco de dados, basta usar a função names (): names(dadosNeonatos) ## [1] &quot;pesoRN&quot; &quot;compRN&quot; &quot;sexo&quot; &quot;tipoParto&quot; &quot;idadeMae&quot; &quot;utiNeo&quot; Para ver a estrutura do banco de dados é útil a variável str (): str(dadosNeonatos) ## &#39;data.frame&#39;: 15 obs. of 6 variables: ## $ pesoRN : num 3340 3345 3750 3650 3220 ... ## $ compRN : num 50 48 52 48 50 51 50 51 47 47 ... ## $ sexo : num 2 2 2 1 1 1 2 1 1 1 ... ## $ tipoParto: num 1 1 2 1 2 2 1 2 1 1 ... ## $ idadeMae : num 40 19 26 19 32 24 27 20 21 19 ... ## $ utiNeo : num 2 2 2 2 1 2 1 2 2 2 ... Observa-se que todas as variáveis do banco de dados estão como numéricas. Entretanto, as variáveis sexo, tipoParto e utiNeo não são numéricas, são categóricas, onde na variável sexo, 1 = masculino e 2 = feminino, na variável tipoParto, 1 = normal e 2 = cesareo e na variável utiNeo, 1 = sim e 2 = não. Sem qualquer transformação, é possível realizar operações matemáticas, o que é “non sense”! Para transformar essas variáveis em um fator, é usada, como vimos, a função factor (): dadosNeonatos$sexo &lt;- factor (dadosNeonatos$sexo, levels = c (1,2), label = c (&quot;masculino&quot;, &quot;feminino&quot;)) dadosNeonatos$tipoParto &lt;- factor (dadosNeonatos $tipoParto, levels = c (1,2), labels = c (&quot;normal&quot;, &quot;cesareo&quot;)) dadosNeonatos$utiNeo &lt;- factor (dadosNeonatos$utiNeo, levels = c (1,2), labels = c (&quot;sim&quot;, &quot;não&quot;)) dadosNeonatos ## pesoRN compRN sexo tipoParto idadeMae utiNeo ## 1 3340 50 feminino normal 40 não ## 2 3345 48 feminino normal 19 não ## 3 3750 52 feminino cesareo 26 não ## 4 3650 48 masculino normal 19 não ## 5 3220 50 masculino cesareo 32 sim ## 6 4070 51 masculino cesareo 24 não ## 7 3380 50 feminino normal 27 sim ## 8 3970 51 masculino cesareo 20 não ## 9 3060 47 masculino normal 21 não ## 10 3180 47 masculino normal 19 não ## 11 2865 47 feminino normal 23 não ## 12 2815 49 feminino cesareo 36 sim ## 13 3245 51 masculino normal 21 não ## 14 2051 50 masculino normal 23 não ## 15 2630 44 feminino normal 23 não O banco de dados, agora, tem um aspecto mais amigável e compreensível. Se olharmos a sua estrutura, após as transformações, temos: str(dadosNeonatos) ## &#39;data.frame&#39;: 15 obs. of 6 variables: ## $ pesoRN : num 3340 3345 3750 3650 3220 ... ## $ compRN : num 50 48 52 48 50 51 50 51 47 47 ... ## $ sexo : Factor w/ 2 levels &quot;masculino&quot;,&quot;feminino&quot;: 2 2 2 1 1 1 2 1 1 1 ... ## $ tipoParto: Factor w/ 2 levels &quot;normal&quot;,&quot;cesareo&quot;: 1 1 2 1 2 2 1 2 1 1 ... ## $ idadeMae : num 40 19 26 19 32 24 27 20 21 19 ... ## $ utiNeo : Factor w/ 2 levels &quot;sim&quot;,&quot;não&quot;: 2 2 2 2 1 2 1 2 2 2 ... Depois das transformações, as variáveis passaram a ser classificadas como fatores, cada uma delas com dois níveis. 7.5.2 Salvando os arquivos no seu diretório Crie um diretório de trabalho em seu computador. Coloque um nome sugestivo, por exemplo, Bioestatística_R e salve todos os arquivos, relacionados ao tema, nele. Para obter o arquivo dadosMater.xlsx, você deve clicar aqui e baixar para o para seu diretório de trabalho, por exemplo, Bioestatística_R. Para o arquivo dadosMater15.csv, clique aqui e proceda da mesma maneira que para o dadosMater.xlsx. Feito! Os arquivos dadosMater.xlsx e dadosMater15.csv, agora, estão em seu diretório de trabalho, prontos para serem manipulados! 7.5.3 Importando um banco de dados 7.5.3.1 Importando dados de um arquivo CSV A função read.csv () e read.csv2 () podem ser utilizadas para importar arquivos CSV. Existe uma pequena diferença entre elas. Dois argumentos dessas funções têm padrão diferentes em cada uma. São eles: sep (separador de colunas) e dec (separador de decimais). Em read.csv (), o padrão ésep = ”,” e dec = ”.” e em read.csv2 () o padrão é sep = “;” e dec = ”,”. Quando se usa o read.csv () há necessidade de informar o separador e o decimal, pois senão ele usará o padrão inglês e o arquivo não será lido. Já com read.csv2(), que o usa o padrão brasileiro, não há necessidade de informar ao R qual o separador de colunas e nem o separador dos decimais. Quando o arquivo se encontra no diretório de trabalho, como é o caso do dadosMater15.csv, procede-se da seguinte maneira: dadosMater&lt;- read.csv2 (&quot;dadosMater15.csv&quot;) Ou, para os casos onde seu arquivo não se encontra no diretório de trabalho: dadosMater &lt;- read.csv2 (file.choose()) 7.5.3.2 Importando dados de um arquivo Excel Existem várias formas de importar do Excel, recomenda-se usar a função read_excel () do pacote readxl. Quando o arquivo se encontra no diretório de trabalho, como é o caso do dadosMater15.xlsx, procede-se da seguinte maneira: library(readxl) dadosMater &lt;- read_excel (&quot;dadosMater15.xlsx&quot;, sheet = 1) O argumento sheet = 1, significa que se está abrindo a planilha 1 do arquivo. Este argumento é importante se houver mais de uma planilha, caso contrário, ele é opcional. Se você não estiver no diretório de trabalho, proceda como visto na importação de dados CSV. dadosMater &lt;- read_excel (file.choose()) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
